openapi: 3.1.0
info:
  version: 1.0.0
  title: CocoaFlow API
  summary: Comprehensive Cocoa Industry Management Platform
  description: |
    # 🌱 CocoaFlow API

    **The Complete Solution for Cocoa Industry Digital Transformation**

    ---

    ## 🎯 Overview

    CocoaFlow is a comprehensive API platform designed to revolutionize cocoa industry operations through digital transformation. Our API provides end-to-end solutions for farmer management, farm tracking, certification compliance, and supply chain optimization.

    ### 🌟 Why CocoaFlow?

    - **🌍 Industry-Focused**: Built specifically for cocoa industry challenges
    - **🔒 Enterprise-Grade**: Production-ready with enterprise security
    - **📊 Data-Driven**: Comprehensive analytics and reporting
    - **🌱 Sustainable**: Supports Rainforest Alliance certification
    - **🚀 Scalable**: Designed for growth and expansion

    ---

    ## 🚀 Key Features

    ### 👨‍🌾 **Farmer Management**
    Complete farmer profiles, contracts, and relationship tracking with digital onboarding and verification.

    ### 🏡 **Farm Operations**
    GPS coordinates, inspection data, and compliance monitoring with real-time tracking capabilities.

    ### 🌿 **Certification Support**
    Rainforest Alliance compliance tracking and audit trails with automated compliance checks.

    ### 📈 **Campaign Management**
    Seasonal campaign management and data collection periods with performance analytics.

    ### 🔄 **Supply Chain**
    Market management, transactions, and inventory tracking with end-to-end traceability.

    ### 🎓 **Training & Education**
    Session management and participant tracking with learning analytics and certification.

    ---

    ## 🛠️ Getting Started

    ### 1. **Authentication**
    ```bash
    # JWT Bearer Token Authentication
    curl -H "Authorization: Bearer YOUR_JWT_TOKEN" \
         https://api.cocoaflow.com/v1/farms
    ```

    ### 2. **API Requirements**
    - **Content-Type**: `application/json`
    - **Rate Limiting**: 1000 requests per hour per API key
    - **Authentication**: JWT Bearer token required

    ### 3. **Quick Start**
    ```bash
    # Install SDK
    npm install @cocoaflow/js-sdk

    # Initialize client
    const client = new CocoaFlowAPI({
      apiKey: 'your-api-key',
      baseURL: 'https://api.cocoaflow.com'
    });
    ```

    ---

    ## 🌐 Environment

    | Environment | URL | Status |
    |-------------|-----|--------|
    | **Production** | [https://api.cocoaflow.com](https://api.cocoaflow.com) | 🚧 Coming Soon |
    | **Documentation** | [https://project-apispec.vercel.app](https://project-apispec.vercel.app) | ✅ Live |
    | **Local Development** | `http://localhost:8080` | ✅ Available |

    ---

    ## 📚 SDKs & Libraries

    | SDK | Language | Status | Documentation |
    |-----|----------|--------|---------------|
    | **JavaScript/TypeScript** | Node.js, Browser | 🚧 Design Phase | [View Design](https://github.com/frckbrice/project-api_spec/tree/main/sdks/javascript) |
    | **Python** | Python 3.8+ | 🚧 Design Phase | [View Design](https://github.com/frckbrice/project-api_spec/tree/main/sdks/python) |
    | **Postman Collection** | API Testing | ✅ Ready | [Download](https://github.com/frckbrice/project-api_spec/tree/main/postman) |

    ---

    ## 🆘 Support & Resources

    - **📖 Documentation**: [https://project-apispec.vercel.app](https://project-apispec.vercel.app)
    - **📧 Support Email**: support@cocoaflow.com
    - **🐛 Issues**: [GitHub Issues](https://github.com/frckbrice/project-api_spec/issues)
    - **📚 API Reference**: [OpenAPI Spec](./cocoaflow-api.yaml)

    ---

    ## 🏗️ Architecture

    ### **Security**
    - JWT Bearer Token Authentication
    - OAuth 2.0 Support (Coming Soon)
    - Rate Limiting & Throttling
    - CORS Configuration

    ### **Performance**
    - RESTful API Design
    - Pagination Support
    - Caching Headers
    - Compression

    ### **Reliability**
    - Standardized Error Responses
    - Comprehensive Logging
    - Health Check Endpoints
    - Monitoring & Analytics

    ---

    *Built with ❤️ for the Cocoa Industry*
  termsOfService: https://cocoaflow.com/terms
  contact:
    email: support@cocoaflow.com
    url: https://cocoaflow.com/contact
    name: CocoaFlow Support Team
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  x-logo:
    url: https://cocoaflow.com/assets/logo.png
    altText: CocoaFlow Logo
    backgroundColor: '#2E7D32'
    href: https://cocoaflow.com
servers:
  - url: https://api.cocoaflow.com
    description: 🌐 Production Environment
  - url: https://staging-api.cocoaflow.com
    description: 🧪 Staging Environment
  - url: https://project-apispec.vercel.app
    description: 📚 Documentation & API Specification
  - url: http://localhost:8080
    description: 💻 Local Development Environment
security:
  - BearerAuth: []
  - ApiKeyAuth: []
tags:
  - name: 🔐 Authentication
    description: |
      **User authentication and authorization endpoints**

      Secure JWT Bearer token authentication with OAuth 2.0 support for third-party integrations.

      **Features:**
      - JWT Token Management
      - OAuth 2.0 Authorization
      - Role-based Access Control
      - Session Management
  - name: 🏢 Companies
    description: |
      **Company management operations for cocoa industry organizations**

      Complete company profile management with multi-tenant support and organizational hierarchy.

      **Features:**
      - Company Registration & Onboarding
      - Multi-tenant Architecture
      - Organizational Hierarchy
      - Compliance Management
  - name: 👥 Users
    description: |
      **User management for system administrators and company employees**

      Comprehensive user management with role-based permissions and activity tracking.

      **Features:**
      - User Registration & Profiles
      - Role-based Permissions
      - Activity Tracking
      - Password Management
  - name: 👨‍🌾 Farmers
    description: |
      **Farmer profile and relationship management**

      Digital farmer onboarding with comprehensive profile management and relationship tracking.

      **Features:**
      - Digital Onboarding
      - Profile Management
      - Contract Management
      - Performance Tracking
  - name: 🏡 Farms
    description: |
      **Farm registration, GPS tracking, and compliance monitoring**

      GPS-enabled farm management with real-time tracking and compliance monitoring.

      **Features:**
      - GPS Coordinates
      - Real-time Tracking
      - Compliance Monitoring
      - Inspection Data
  - name: 🌿 Projects
    description: |
      **Rainforest Alliance certification projects and compliance tracking**

      Automated compliance tracking with audit trails and certification management.

      **Features:**
      - Certification Tracking
      - Audit Trails
      - Compliance Automation
      - Reporting Tools
  - name: 📈 Campaigns
    description: |
      **Seasonal campaign management and data collection periods**

      Seasonal campaign management with performance analytics and data collection.

      **Features:**
      - Campaign Planning
      - Data Collection
      - Performance Analytics
      - Seasonal Management
  - name: 🏪 Markets
    description: |
      **Market sessions for cocoa trading between companies and farmers**

      Digital marketplace for cocoa trading with transaction management and pricing.

      **Features:**
      - Digital Marketplace
      - Transaction Management
      - Pricing Models
      - Market Analytics
  - name: 💰 Transactions
    description: |
      **Financial transactions and payment processing**

      Secure payment processing with transaction history and financial reporting.

      **Features:**
      - Payment Processing
      - Transaction History
      - Financial Reporting
      - Audit Trails
  - name: 🎓 Training
    description: |
      **Farmer training sessions and educational content management**

      Comprehensive training management with learning analytics and certification tracking.

      **Features:**
      - Session Management
      - Learning Analytics
      - Certification Tracking
      - Content Management
  - name: 🔍 Inspection
    description: |
      **Farm inspection data collection and compliance verification**

      Digital inspection tools with automated compliance verification and reporting.

      **Features:**
      - Digital Inspections
      - Compliance Verification
      - Automated Reporting
      - Data Collection
  - name: 📊 Analytics
    description: |
      **Data analytics and reporting endpoints**

      Comprehensive business intelligence with real-time analytics and custom reporting.

      **Features:**
      - Business Intelligence
      - Real-time Analytics
      - Custom Reporting
      - Data Visualization
  - name: ⚙️ Administration
    description: |
      **System administration and configuration**

      System-wide administration tools with configuration management and monitoring.

      **Features:**
      - System Configuration
      - User Management
      - Monitoring & Alerts
      - Backup & Recovery
externalDocs:
  description: 📚 GitHub Repository & Documentation
  url: https://github.com/frckbrice/project-api_spec
paths:
  /auth/login:
    post:
      tags:
        - 🔐 Authentication
      summary: User Login
      description: |
        Authenticate a user with email and password to obtain JWT tokens.

        **Authentication Flow:**
        1. User provides email and password
        2. System validates credentials
        3. Returns JWT access token and refresh token
        4. Access token expires in 24 hours
        5. Refresh token expires in 30 days

        **Security Features:**
        - Password hashing with bcrypt
        - Rate limiting (5 attempts per 15 minutes)
        - Account lockout after failed attempts
        - Audit logging for security events
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
                  example: user@example.com
                password:
                  type: string
                  format: password
                  description: User's password (min 8 characters)
                  minLength: 8
                  example: securePassword123
                remember_me:
                  type: boolean
                  description: Whether to extend token expiration
                  default: false
                  example: true
            examples:
              basic_login:
                summary: Basic login
                description: Standard login with email and password
                value:
                  email: user@example.com
                  password: securePassword123
              extended_session:
                summary: Extended session
                description: Login with extended token expiration
                value:
                  email: user@example.com
                  password: securePassword123
                  remember_me: true
      responses:
        '200':
          description: Login successful
          headers:
            Set-Cookie:
              description: Refresh token cookie (HttpOnly, Secure)
              schema:
                type: string
                example: refresh_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...; HttpOnly; Secure; SameSite=Strict
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Login successful
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/user'
                      tokens:
                        type: object
                        properties:
                          access_token:
                            type: string
                            description: JWT access token
                            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                          refresh_token:
                            type: string
                            description: JWT refresh token
                            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                          expires_in:
                            type: integer
                            description: Token expiration time in seconds
                            example: 86400
                          token_type:
                            type: string
                            example: Bearer
              example:
                success: true
                message: Login successful
                data:
                  user:
                    id: clh1234567890abcdef
                    email: user@example.com
                    first_name: John
                    last_name: Doe
                    role: user
                    company_id: clh1234567890abcdef
                    is_active: true
                    created_at: '2024-01-15T10:30:00Z'
                    updated_at: '2024-01-15T10:30:00Z'
                  tokens:
                    access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                    refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                    expires_in: 86400
                    token_type: Bearer
        '400':
          $ref: '#/components/responses/ValidationError-2'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: Invalid Credentials
                  message:
                    type: string
                    example: Email or password is incorrect
                  code:
                    type: string
                    example: INVALID_CREDENTIALS
        '429':
          $ref: '#/components/responses/RateLimitError-2'
        '500':
          $ref: '#/components/responses/ServerError-2'
    get:
      tags:
        - 🔐 Authentication
      summary: Get Current User
      description: |
        Retrieve the current authenticated user's profile information.

        **Required Permissions:** `read:profile`

        **Features:**
        - Returns complete user profile
        - Includes company information
        - Shows user permissions and roles
        - Returns last login timestamp
      operationId: getCurrentUser
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/user'
              example:
                success: true
                data:
                  id: clh1234567890abcdef
                  email: user@example.com
                  first_name: John
                  last_name: Doe
                  role: user
                  company_id: clh1234567890abcdef
                  phone_number: '+2341234567890'
                  is_active: true
                  last_login: '2024-01-15T10:30:00Z'
                  created_at: '2024-01-15T10:30:00Z'
                  updated_at: '2024-01-15T10:30:00Z'
        '401':
          $ref: '#/components/responses/UnauthorizedError-2'
        '500':
          $ref: '#/components/responses/ServerError-2'
  /auth/refresh:
    post:
      tags:
        - 🔐 Authentication
      summary: Refresh Access Token
      description: |
        Refresh an expired access token using a valid refresh token.

        **Token Refresh Flow:**
        1. Client sends refresh token
        2. System validates refresh token
        3. Returns new access token
        4. Refresh token remains valid (30 days)

        **Security Features:**
        - Refresh token rotation (optional)
        - Token blacklisting for security
        - Audit logging for token refresh events
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refresh_token
              properties:
                refresh_token:
                  type: string
                  description: Valid refresh token
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
            examples:
              refresh_token:
                summary: Refresh token request
                description: Standard token refresh
                value:
                  refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Token refreshed successfully
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        description: New JWT access token
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                      expires_in:
                        type: integer
                        description: Token expiration time in seconds
                        example: 86400
                      token_type:
                        type: string
                        example: Bearer
              example:
                success: true
                message: Token refreshed successfully
                data:
                  access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                  expires_in: 86400
                  token_type: Bearer
        '400':
          $ref: '#/components/responses/ValidationError-2'
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: Invalid Refresh Token
                  message:
                    type: string
                    example: Refresh token is invalid or expired
                  code:
                    type: string
                    example: INVALID_REFRESH_TOKEN
        '500':
          $ref: '#/components/responses/ServerError-2'
  /auth/logout:
    post:
      tags:
        - 🔐 Authentication
      summary: User Logout
      description: |
        Logout the current user and invalidate their tokens.

        **Logout Process:**
        1. Invalidate current access token
        2. Invalidate refresh token
        3. Clear session data
        4. Log logout event for audit

        **Security Features:**
        - Token blacklisting
        - Session cleanup
        - Audit logging
        - Cookie clearing
      operationId: logout
      security:
        - BearerAuth: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
                  description: Refresh token to invalidate (optional)
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
            examples:
              logout_all:
                summary: Logout all sessions
                description: Logout without specifying refresh token (invalidates all sessions)
                value: {}
              logout_specific:
                summary: Logout specific session
                description: Logout with specific refresh token
                value:
                  refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
      responses:
        '200':
          description: Logout successful
          headers:
            Set-Cookie:
              description: Clear refresh token cookie
              schema:
                type: string
                example: refresh_token=; HttpOnly; Secure; SameSite=Strict; Max-Age=0
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Logout successful
                  data:
                    type: object
                    properties:
                      logout_time:
                        type: string
                        format: date-time
                        description: Timestamp of logout
                        example: '2024-01-15T10:30:00Z'
                      sessions_invalidated:
                        type: integer
                        description: Number of sessions invalidated
                        example: 1
              example:
                success: true
                message: Logout successful
                data:
                  logout_time: '2024-01-15T10:30:00Z'
                  sessions_invalidated: 1
        '401':
          $ref: '#/components/responses/UnauthorizedError-2'
        '500':
          $ref: '#/components/responses/ServerError-2'
  /auth/me:
    get:
      tags:
        - 🔐 Authentication
      summary: Get Current User
      description: |
        Retrieve the current authenticated user's profile information.

        **Required Permissions:** `read:profile`

        **Features:**
        - Returns complete user profile
        - Includes company information
        - Shows user permissions and roles
        - Returns last login timestamp
      operationId: getCurrentUser
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/user'
              example:
                success: true
                data:
                  id: clh1234567890abcdef
                  email: user@example.com
                  first_name: John
                  last_name: Doe
                  role: user
                  company_id: clh1234567890abcdef
                  phone_number: '+2341234567890'
                  is_active: true
                  last_login: '2024-01-15T10:30:00Z'
                  created_at: '2024-01-15T10:30:00Z'
                  updated_at: '2024-01-15T10:30:00Z'
        '401':
          $ref: '#/components/responses/UnauthorizedError-2'
        '500':
          $ref: '#/components/responses/ServerError-2'
  /users:
    post:
      tags:
        - User
      summary: user stored after registration from clerk.
      description: The user object that is stored to the system after being authenticated by the third party authentication system.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                schema:
                  discriminator:
                    propertyName: userType
                    mapping:
                      admin: '#/components/schemas/admin'
                      basic: '#/components/schemas/member'
                  anyOf:
                    - $ref: '#/components/schemas/admin'
                    - $ref: '#/components/schemas/member'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '422':
          description: Unprocessable Entity
        '500':
          description: Internal server error
      security:
        - BearerAuth: []
    get:
      tags:
        - User
      summary: List all users
      description: This operation lets you list users by their status. A single status value can be provided in a single request. Only administrators can use this operation.
      operationId: getAllUsers
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: number  of pages to return by the server
          schema:
            type: integer
          required: false
        - name: limit
          in: query
          description: page size
          required: false
          schema:
            type: integer
            example: 20
        - name: status
          in: query
          description: One or more user status values by which to look up user accounts.
          required: true
          style: form
          explode: false
          schema:
            type: array
            uniqueItems: true
            minItems: 1
            maxItems: 3
            items:
              type: string
              enum:
                - active
                - banned
                - inactive
              default: active
      responses:
        '200':
          description: User list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user'
        '400':
          description: Invalid Input
  /users/{id}:
    get:
      tags:
        - User
      summary: Get user by id
      operationId: getUserById
      description: To get a single user by id. Only administrators can use this operation. If you want to get a single user by id, use the **getUserById** operation.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          description: user id
          required: true
          schema:
            type: integer
            example: djfdjsbhvbhsv62656FDOF(*)
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '404':
          description: User not found
    put:
      tags:
        - User
      summary: Update user by id
      description: modify some information concerning the user.
      operationId: updateUserById
      parameters:
        - name: id
          in: path
          description: The ID of the user to be updated.
          required: true
          schema:
            type: string
            example: 1jssbbjsbjsbjs221878dd817dd87sd
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
                properties:
                  id:
                    type: string
                    example: 1jssbbjsbjsbjs221878dd817dd87sd
                  username: user11452
                  email: user@example.com
                  password: 123456
                  first_name: John
                  last_name: Doe
                  role: user
                  company_id: 1jssbbjsbjsbjs221878dd817dd87sd
                  phone_number: 1234567890
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '404':
          description: User not found
        '500':
          description: Internal server error
  /companies:
    post:
      tags:
        - Company
      summary: Create a new company
      operationId: createCompany
      description: To create a  new company in the system after registration. This operation is done by the PDG of the company exclusively.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              $ref: '#/components/schemas/company'
      responses:
        '201':
          description: Company created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api-response-success-schema'
        '400':
          description: bad request
        '403':
          description: Authorization failed due to insufficient permissions.
          content:
            schema:
              type: object
              properties:
                statusCode:
                  type: number
                  example: 403 | 401 | 403 | 404 | 500
                timestamp:
                  type: string
                  format: date-time
                  example: '2022-01-01T12:34:56Z'
                  description: The date and time when the response was generated.
                path:
                  type: string
                  example: /api/users/123
                  description: The API endpoint that generated the response.
                  nullable: false
                message:
                  type: object
                  format: json
                  properties:
                    message:
                      type: string
                      example: Cannot PUT /v1/requirements
                    error:
                      type: string
                      example: NOT FOUND
                    statusCode:
                      type: number
                      example: 404 | 403 | 401 | 403 | 422 | 500
        '500':
          description: Internal server error
    get:
      tags:
        - Company
      summary: List all companies
      operationId: getAllCompanies
      description: To list all companies in the system. Only administrators can use this operation.
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: page number
          required: false
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: page size
          required: false
          schema:
            type: integer
            example: 20
        - name: sort
          in: query
          description: sorting the resulting list of company
          required: false
          schema:
            type: string
            example: asc | desc
      responses:
        '200':
          description: Company list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/company'
        '404':
          description: Companies not found
        '500':
          description: Internal server error
  /companies/{id}:
    get:
      tags:
        - Company
      summary: Find a company by id
      description: Returns Company based on its id
      operationId: getCompanyById
      parameters:
        - in: path
          name: id
          description: company id
          required: true
          schema:
            type: array
            items:
              type: string
              example: 1
          style: simple
      responses:
        '200':
          description: Company
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/company'
        '401':
          description: Unauthorized access
        '404':
          description: Company not found
    delete:
      tags:
        - Company
      description: To delete a company by id. Only administrators can use this operation.
      summary: Delete a company by id
      operationId: deleteCompanyById
      parameters:
        - in: path
          name: id
          description: company id
          required: true
          schema:
            type: array
            items:
              type: string
              example: AQA9CNo0cXNLt6sZp5Uc5P0
          style: simple
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Company deleted
        '400':
          description: Bad request
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access
        '404':
          description: Company not found
  /campaign:
    post:
      tags:
        - 📈 Campaigns
      summary: Create a new campaign
      description: |
        Create a new campaign from which all the operations like projects will be performed.

        **Required Permissions:** `write:campaigns`

        **Business Rules:**
        - Campaign names must be unique within a company
        - Campaign dates cannot overlap with existing campaigns
        - Only one active campaign per company at a time
      operationId: createCampaign
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - start_date
                - end_date
              properties:
                name:
                  type: string
                  description: Campaign name (e.g., "2024-2025 Season")
                  example: 2024-2025 Season
                description:
                  type: string
                  description: Campaign description
                  example: Main cocoa harvesting campaign for 2024-2025 season
                start_date:
                  type: string
                  format: date
                  description: Campaign start date
                  example: '2024-09-01'
                end_date:
                  type: string
                  format: date
                  description: Campaign end date
                  example: '2025-03-31'
                company_id:
                  type: string
                  format: cuid
                  description: Company ID for the campaign
                  example: clh1234567890abcdef
            examples:
              basic_campaign:
                summary: Basic campaign
                description: Create a campaign with minimal information
                value:
                  name: 2024-2025 Season
                  start_date: '2024-09-01'
                  end_date: '2025-03-31'
              detailed_campaign:
                summary: Detailed campaign
                description: Create a campaign with full details
                value:
                  name: 2024-2025 Season
                  description: Main cocoa harvesting campaign for 2024-2025 season
                  start_date: '2024-09-01'
                  end_date: '2025-03-31'
                  company_id: clh1234567890abcdef
      responses:
        '201':
          description: Campaign created successfully
          headers:
            Location:
              description: URL of the created campaign resource
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/campaign'
              example:
                id: clh1234567890abcdef
                name: 2024-2025 Season
                description: Main cocoa harvesting campaign for 2024-2025 season
                start_date: '2024-09-01'
                end_date: '2025-03-31'
                company_id: clh1234567890abcdef
                status: active
                created_at: '2024-01-15T10:30:00Z'
                updated_at: '2024-01-15T10:30:00Z'
        '400':
          $ref: '#/components/responses/ValidationError-2'
        '401':
          $ref: '#/components/responses/UnauthorizedError-2'
        '403':
          $ref: '#/components/responses/ForbiddenError-2'
        '409':
          description: Campaign already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Campaign Already Exists
                  message:
                    type: string
                    example: A campaign with this name already exists
                  code:
                    type: string
                    example: CAMPAIGN_ALREADY_EXISTS
        '500':
          $ref: '#/components/responses/ServerError-2'
    get:
      tags:
        - 📈 Campaigns
      summary: List all campaigns
      description: |
        Retrieve a paginated list of campaigns with optional filtering capabilities.

        **Required Permissions:** `read:campaigns`

        **Filtering Options:**
        - Filter by company ID
        - Filter by status (active, inactive, completed)
        - Filter by date range
        - Filter by campaign name

        **Pagination:**
        - Default limit: 20 items per page
        - Maximum limit: 100 items per page
      operationId: getAllCampaigns
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PaginationLimit'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/CompanyId'
        - $ref: '#/components/parameters/DateRangeStart'
        - $ref: '#/components/parameters/DateRangeEnd'
        - name: status
          in: query
          description: Filter by campaign status
          required: false
          schema:
            type: string
            enum:
              - active
              - inactive
              - completed
            example: active
        - name: name
          in: query
          description: Filter by campaign name (partial match)
          required: false
          schema:
            type: string
            example: 2024-2025
      responses:
        '200':
          description: Campaign list retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/campaign'
                  pagination:
                    type: object
                    properties:
                      limit:
                        type: integer
                        example: 20
                      offset:
                        type: integer
                        example: 0
                      total:
                        type: integer
                        example: 5
                      page_count:
                        type: integer
                        example: 1
                      has_next:
                        type: boolean
                        example: false
                      has_prev:
                        type: boolean
                        example: false
              example:
                data:
                  - id: clh1234567890abcdef
                    name: 2024-2025 Season
                    description: Main cocoa harvesting campaign for 2024-2025 season
                    start_date: '2024-09-01'
                    end_date: '2025-03-31'
                    company_id: clh1234567890abcdef
                    status: active
                    created_at: '2024-01-15T10:30:00Z'
                    updated_at: '2024-01-15T10:30:00Z'
                  - id: clh1234567890abcdeg
                    name: 2023-2024 Season
                    description: Previous cocoa harvesting campaign
                    start_date: '2023-09-01'
                    end_date: '2024-03-31'
                    company_id: clh1234567890abcdef
                    status: completed
                    created_at: '2023-08-15T10:30:00Z'
                    updated_at: '2024-03-31T23:59:59Z'
                pagination:
                  limit: 20
                  offset: 0
                  total: 2
                  page_count: 1
                  has_next: false
                  has_prev: false
        '400':
          $ref: '#/components/responses/ValidationError-2'
        '401':
          $ref: '#/components/responses/UnauthorizedError-2'
        '403':
          $ref: '#/components/responses/ForbiddenError-2'
        '500':
          $ref: '#/components/responses/ServerError-2'
    put:
      tags:
        - 📈 Campaigns
      summary: Update a campaign
      description: |
        Update an existing campaign's information.

        **Required Permissions:** `write:campaigns`

        **Business Rules:**
        - Cannot update campaign dates if projects are already associated
        - Cannot change status to inactive if campaign has active projects
        - Only campaign owner or admin can update campaign
      operationId: updateCampaign
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Campaign name
                  example: 2024-2025 Season Updated
                description:
                  type: string
                  description: Campaign description
                  example: Updated campaign description
                start_date:
                  type: string
                  format: date
                  description: Campaign start date
                  example: '2024-09-01'
                end_date:
                  type: string
                  format: date
                  description: Campaign end date
                  example: '2025-03-31'
                status:
                  type: string
                  enum:
                    - active
                    - inactive
                    - completed
                  description: Campaign status
                  example: active
            examples:
              update_campaign:
                summary: Update campaign
                description: Update campaign with new information
                value:
                  name: 2024-2025 Season Updated
                  description: Updated campaign description
                  status: active
      responses:
        '200':
          description: Campaign updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/campaign'
              example:
                id: clh1234567890abcdef
                name: 2024-2025 Season Updated
                description: Updated campaign description
                start_date: '2024-09-01'
                end_date: '2025-03-31'
                company_id: clh1234567890abcdef
                status: active
                created_at: '2024-01-15T10:30:00Z'
                updated_at: '2024-01-15T11:30:00Z'
        '400':
          $ref: '#/components/responses/ValidationError-2'
        '401':
          $ref: '#/components/responses/UnauthorizedError-2'
        '403':
          $ref: '#/components/responses/ForbiddenError-2'
        '404':
          description: Campaign not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Campaign Not Found
                  message:
                    type: string
                    example: Campaign with the specified ID was not found
                  code:
                    type: string
                    example: CAMPAIGN_NOT_FOUND
        '409':
          description: Campaign update conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Campaign Update Conflict
                  message:
                    type: string
                    example: Cannot update campaign due to existing projects
                  code:
                    type: string
                    example: CAMPAIGN_UPDATE_CONFLICT
        '500':
          $ref: '#/components/responses/ServerError-2'
    delete:
      tags:
        - 📈 Campaigns
      summary: Delete a campaign
      description: |
        Delete a campaign from the system.

        **Required Permissions:** `write:campaigns`

        **Business Rules:**
        - Cannot delete campaigns with associated projects
        - Cannot delete active campaigns
        - Only campaign owner or admin can delete campaign
        - Soft delete - marks campaign as deleted but preserves data
      operationId: deleteCampaign
      security:
        - BearerAuth: []
      responses:
        '204':
          description: Campaign deleted successfully
        '400':
          description: Cannot delete campaign
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Cannot Delete Campaign
                  message:
                    type: string
                    example: Campaign has associated projects and cannot be deleted
                  code:
                    type: string
                    example: CAMPAIGN_HAS_PROJECTS
        '401':
          $ref: '#/components/responses/UnauthorizedError-2'
        '403':
          $ref: '#/components/responses/ForbiddenError-2'
        '404':
          description: Campaign not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Campaign Not Found
                  message:
                    type: string
                    example: Campaign with the specified ID was not found
                  code:
                    type: string
                    example: CAMPAIGN_NOT_FOUND
        '500':
          $ref: '#/components/responses/ServerError-2'
  /price_plan:
    post:
      tags:
        - Price
      summary: Create price table for subscription
      operationId: createPriceTable
      description: To create price table for subscription. Only administrators can use this operation. If you want to create price table for subscription, use the **createPriceTable** operation.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/price_plan'
      responses:
        '201':
          description: price table created
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access
        '500':
          description: internal server error
    get:
      tags:
        - Price
      summary: Get all price
      operationId: getAllPrice
      description: To get all price. Only administrators can use this operation. If you want to get all price, use the **getAllPrice** operation.
      responses:
        '200':
          description: price
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/price_plan'
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access
        '500':
          description: internal server error
  /price_plan/{id}:
    patch:
      tags:
        - Price
      summary: Update price table for subscription
      operationId: updatePriceTable
      description: To update price table for subscription. Only administrators can use this operation.
      parameters:
        - in: path
          name: id
          description: price table id
          required: true
          schema:
            type: string
            example: AQA9CNo0cXNLt6sZp5Uc5P0
          style: simple
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/price_plan'
              properties:
                unit_amount:
                  type: string
                  example: $2000
      responses:
        '200':
          description: price table updated
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access
        '500':
          description: internal server error
    delete:
      tags:
        - Price
      summary: Delete price table for subscription
      operationId: deletePriceTable
      description: To delete price table for subscription. Only administrators can use this operation.
      parameters:
        - in: path
          name: id
          description: To delete price table for subscription by id
          required: true
          schema:
            type: string
            example: gold_price_table
          style: simple
      responses:
        '200':
          description: price table deleted
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access
        '500':
          description: internal server error
    get:
      tags:
        - Price
      summary: Get price table for subscription
      operationId: getPriceTable
      description: To get price table for subscription. Only administrators can use this operation. If you want to get price table for subscription, use the **getPriceTable** operation.
      parameters:
        - in: path
          name: id
          description: price table id
          required: true
          schema:
            type: string
            example: gold_price_table
          style: simple
      responses:
        '200':
          description: price table
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/price_plan'
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access
        '500':
          description: internal server error
  /projects:
    post:
      tags:
        - Project
      summary: get all project done by this company by archived, active, draft
      description: To create the project form by a specific company administrator (ADG).
      operationId: getAllProjectsByCompany
      security:
        - BearerAuth: []
      parameters:
        - name: company_id
          in: query
          description: company id
          required: false
          schema:
            type: string
            example: AQA9CNo0cXNLt6sZp5Uc5P0
          style: simple
        - in: query
          name: archived
          description: archived projects
          required: false
          schema:
            type: boolean
            example: true
          style: simple
        - in: query
          name: type
          description: The project type to filter the projects by their type.
          required: false
          schema:
            type: string
            example: initial inspection, external inspection, auto evaluation
        - in: query
          name: active
          description: active projects
          required: false
          schema:
            type: boolean
            example: true
          style: simple
        - name: draft
          in: query
          description: draft projects
          required: false
          schema:
            type: boolean
            example: true
          style: simple
        - name: skip
          in: query
          description: number of items to skip
          required: true
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: max records to return
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Project
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/project'
        '400':
          description: Bad request
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access
        '404':
          description: Project not found
  /projects/{id}:
    get:
      tags:
        - Project
      description: Returns Project based on its id
      summary: Find project by id
      operationId: getProjectById
      parameters:
        - in: path
          name: id
          description: project id
          required: true
          schema:
            type: array
            items:
              type: string
              example: AQA9CNo0cXNLt6sZp5Uc5P0
          style: simple
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Project
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/project'
        '400':
          description: Bad request
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access
        '404':
          description: Project not found
    put:
      tags:
        - Project
      description: To update a project by id. Only administrators can use this operation.
      summary: Update a project by id
      operationId: updateProjectById
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          description: The unique project Identifier
          required: true
          schema:
            type: string
            example: AQA9CNo0cXNLt6sZp5Uc5P0
          style: simple
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/project'
      responses:
        '200':
          description: Project updated
        '400':
          description: Bad request
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access
        '404':
          description: Project not found
    delete:
      tags:
        - Project
      description: To delete a project by id. Only administrators can use this operation. If you want to delete a project, use the **deleteProject** operation.
      summary: Delete a project by id
      operationId: deleteProjectById
      parameters:
        - in: path
          name: id
          description: project id
          required: true
          schema:
            type: string
            example: AQA9CNo0cXNLt6sZp5Uc5P0
          style: simple
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Project deleted
        '400':
          description: Bad request
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access
        '404':
          description: Project not found
  /farms:
    post:
      tags:
        - Farms
      summary: Create a new farm
      description: |
        Create a new farm record for a farmer. This endpoint registers a farm with GPS coordinates, location details, and basic information.

        **Required Permissions:** `write:farms`

        **Business Rules:**
        - Each farmer can have multiple farms
        - GPS coordinates are required for compliance tracking
        - Farm images are optional but recommended for verification
      operationId: createFarm
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/farm'
            examples:
              basic_farm:
                summary: Basic farm creation
                description: Create a farm with minimal required information
                value:
                  location:
                    lat: 6.5244
                    lng: 3.3792
                  farmer_id: clh1234567890abcdef
                  village: Ibadan Village
                  division: Oyo Division
                  council: Ibadan Council
              complete_farm:
                summary: Complete farm with image
                description: Create a farm with all available information including image
                value:
                  location:
                    lat: 6.5244
                    lng: 3.3792
                  farmer_id: clh1234567890abcdef
                  village: Ibadan Village
                  division: Oyo Division
                  council: Ibadan Council
                  farm_image_url: https://storage.cocoaflow.com/farms/farm_123.jpg
      responses:
        '201':
          description: Farm created successfully
          headers:
            Location:
              description: URL of the created farm resource
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/farm'
              example:
                id: clh1234567890abcdef
                location:
                  lat: 6.5244
                  lng: 3.3792
                farmer_id: clh1234567890abcdef
                village: Ibadan Village
                division: Oyo Division
                council: Ibadan Council
                farm_image_url: https://storage.cocoaflow.com/farms/farm_123.jpg
                created_at: '2024-01-15T10:30:00Z'
                updated_at: '2024-01-15T10:30:00Z'
        '400':
          $ref: '#/components/responses/ValidationError-2'
        '401':
          $ref: '#/components/responses/UnauthorizedError-2'
        '403':
          $ref: '#/components/responses/ForbiddenError-2'
        '409':
          description: Farm already exists for this location
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Farm Already Exists
                  message:
                    type: string
                    example: A farm already exists at these coordinates
                  existing_farm_id:
                    type: string
                    example: clh1234567890abcdef
                  code:
                    type: string
                    example: FARM_ALREADY_EXISTS
        '429':
          $ref: '#/components/responses/RateLimitError-2'
        '500':
          $ref: '#/components/responses/ServerError-2'
    get:
      tags:
        - Farms
      summary: List all farms
      description: |
        Retrieve a paginated list of farms with optional filtering capabilities.

        **Required Permissions:** `read:farms`

        **Filtering Options:**
        - Filter by company ID to see farms under specific companies
        - Filter by date range for farm creation
        - Filter by geographical region (village, division, council)

        **Pagination:**
        - Default limit: 20 items per page
        - Maximum limit: 100 items per page
        - Use offset for pagination
      operationId: getAllFarms
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PaginationLimit'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/CompanyId'
        - $ref: '#/components/parameters/DateRangeStart'
        - $ref: '#/components/parameters/DateRangeEnd'
        - name: farmer_id
          in: query
          description: Filter by specific farmer ID
          required: false
          schema:
            type: string
            format: cuid
            example: clh1234567890abcdef
        - name: village
          in: query
          description: Filter by village name
          required: false
          schema:
            type: string
            example: Ibadan Village
        - name: division
          in: query
          description: Filter by division name
          required: false
          schema:
            type: string
            example: Oyo Division
        - name: council
          in: query
          description: Filter by council name
          required: false
          schema:
            type: string
            example: Ibadan Council
        - name: include_inactive
          in: query
          description: Include inactive farms in results
          required: false
          schema:
            type: boolean
            default: false
            example: false
        - name: sort_by
          in: query
          description: Sort order for results
          required: false
          schema:
            type: string
            enum:
              - created_at
              - updated_at
              - village
              - farmer_id
            default: created_at
            example: created_at
        - name: sort_order
          in: query
          description: Sort direction
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
            example: desc
      responses:
        '200':
          description: List of farms retrieved successfully
          headers:
            X-Total-Count:
              description: Total number of farms matching the filter criteria
              schema:
                type: integer
            X-Page-Count:
              description: Total number of pages
              schema:
                type: integer
            Link:
              description: Pagination links (first, prev, next, last)
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/farm'
                  pagination:
                    type: object
                    properties:
                      limit:
                        type: integer
                        example: 20
                      offset:
                        type: integer
                        example: 0
                      total:
                        type: integer
                        example: 150
                      page_count:
                        type: integer
                        example: 8
                      has_next:
                        type: boolean
                        example: true
                      has_prev:
                        type: boolean
                        example: false
                  meta:
                    type: object
                    properties:
                      filters_applied:
                        type: object
                        example:
                          company_id: clh1234567890abcdef
                          village: Ibadan Village
              example:
                data:
                  - id: clh1234567890abcdef
                    location:
                      lat: 6.5244
                      lng: 3.3792
                    farmer_id: clh1234567890abcdef
                    village: Ibadan Village
                    division: Oyo Division
                    council: Ibadan Council
                    farm_image_url: https://storage.cocoaflow.com/farms/farm_123.jpg
                    created_at: '2024-01-15T10:30:00Z'
                    updated_at: '2024-01-15T10:30:00Z'
                  - id: clh1234567890abcdeg
                    location:
                      lat: 6.5245
                      lng: 3.3793
                    farmer_id: clh1234567890abcdeg
                    village: Lagos Village
                    division: Lagos Division
                    council: Lagos Council
                    created_at: '2024-01-14T09:15:00Z'
                    updated_at: '2024-01-14T09:15:00Z'
                pagination:
                  limit: 20
                  offset: 0
                  total: 150
                  page_count: 8
                  has_next: true
                  has_prev: false
                meta:
                  filters_applied:
                    company_id: clh1234567890abcdef
        '400':
          $ref: '#/components/responses/ValidationError-2'
        '401':
          $ref: '#/components/responses/UnauthorizedError-2'
        '403':
          $ref: '#/components/responses/ForbiddenError-2'
        '429':
          $ref: '#/components/responses/RateLimitError-2'
        '500':
          $ref: '#/components/responses/ServerError-2'
  /farms/{id}:
    get:
      tags:
        - Farm
      summary: Get farm by id
      operationId: getFarmById
      description: To get a farm by its ID. Only administrators can use this operation. If you want to get a farm by its ID, use the **getFarmById** operation.
      parameters:
        - in: path
          name: id
          description: farm id
          required: true
          schema:
            type: string
            example: AQA9CNo0cXNLt6sZp5Uc5P0
          style: simple
      responses:
        '200':
          description: farm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/farm'
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access
        '404':
          description: farm not found
    delete:
      tags:
        - Farm
      summary: Delete farm by id
      operationId: deleteFarmById
      description: To delete a farm by its ID. Only administrators can use this operation. If you want to delete a farm by its ID, use the **deleteFarmById** operation.
      parameters:
        - in: path
          name: id
          description: farm id
          required: true
          schema:
            type: array
            items:
              type: string
              example: AQA9CNo0cXNLt6sZp5Uc5P0
          style: simple
      responses:
        '200':
          description: farm deleted
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access
        '404':
          description: farm not found
    patch:
      tags:
        - Farm
      summary: Update farm by id
      operationId: updateFarmById
      description: To update a farm by its ID. Only administrators can use this operation. If you want to update a farm by its ID, use the **updateFarmById** operation.
      parameters:
        - name: id
          in: path
          description: farm id
          required: true
          schema:
            type: array
            items:
              type: string
              example: AQA9CNo0cXNLt6sZp5Uc5P0
          style: simple
        - name: farmer_id
          in: query
          description: the farmer ID who is the owner of the farm.
          required: true
          schema:
            type: array
            items:
              type: string
              example: AQA9CNo0cXNLt6sZp5Uc5P0
          style: simple
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/farm'
      responses:
        '200':
          description: farm updated
        '404':
          description: farm not foun
  /project_audits:
    post:
      tags:
        - Project_audit
      summary: Create a project audit object
      description: To create the project audit object data to keep track of the company user in charge of conducting the project.
      operationId: createProjectAudit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/project_audit'
      responses:
        '201':
          description: project audit created
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access
        '500':
          description: internal server error
  /receipts:
    post:
      tags:
        - Receipt
      summary: Create a data for a receipt
      description: The receipt data are created after a specific transaction between the farmer and the company during the buying process.
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/receipt'
      responses:
        '201':
          description: the receipt created
        '400':
          description: the receipt not created. Bad Input
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access
        '500':
          description: internal server error
      operationId: createReceipt
    get:
      tags:
        - Receipt
      summary: Get all receipts
      description: To get all receipt produced during a single market.
      operationId: getMarketReceipts
      parameters:
        - name: market_id
          in: query
          description: get the receipt produced during a single market
          schema:
            format: cuid
            type: string
          required: false
        - name: page
          in: query
          description: page number
          required: false
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: page size
          required: false
          schema:
            type: integer
            example: 20
      responses:
        '200':
          description: receipt
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/receipt'
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access
        '500':
          description: internal server error
  /receipts/{id}:
    get:
      tags:
        - Receipt
      summary: Get receipt by Id
      description: Get receipt by Id. and also we can get all the receipts produced during a specific market and by a specific company.
      operationId: getReceiptById
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          description: receipt id
          required: true
          schema:
            type: array
            items:
              type: string
              example: AQA9CNo0cXNLt6sZp5Uc5P0
          style: simple
        - in: query
          name: market_id
          description: get receipt corresponding to a specific market.
          required: true
          schema:
            type: array
            items:
              type: string
              example: AQA9CNo0cXNLt6sZp5Uc5P0
          style: simple
      responses:
        '200':
          description: receipt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/receipt'
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access
        '404':
          description: receipt not found
  /farm_coordinates:
    post:
      tags:
        - Farm_coodinates
      summary: Update farm coordinate
      operationId: updateFarmCoordinate
      description: To update farm coordinate. Only administrators can use this operation. If you want to update farm coordinate, use the **updateFarmCoordinate** operation.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type:
                - object
              required:
                - lat
                - long
              properties:
                lat:
                  type: number
                long:
                  type: number
      responses:
        '201':
          description: farm coordinate updated
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access
        '500':
          description: internal server error
  /farm_coordinate/{farmer_id}:
    get:
      tags:
        - Farm_coodinates
      summary: Get specific farm coordinates data
      description: Get specific farm coordinates data by farm id
      operationId: getFarmCoordinate
      parameters:
        - in: path
          name: farmer_id
          description: farm farmer_id
          required: true
          schema:
            type: array
            items:
              type: string
              example: AQA9CNo0cXNLt6sZp5Uc5P0
          style: simple
      responses:
        '200':
          description: farm coordinate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/farm_coodinates'
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access
        '500':
          description: internal server error
  /markets:
    post:
      tags:
        - Market
      summary: Create a market
      operationId: createMarket
      description: To create a market. This information is used in the company dashboard to display all the markets. Only administrators can use this operation.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/market'
      responses:
        '201':
          description: market created
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access
        '500':
          description: internal server error
    get:
      tags:
        - Market
      summary: Get all markets
      operationId: getAllMarkets
      description: To get all markets. Only administrators can use this operation. If you want to get all markets, use the **getAllMarkets** operation.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: markets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/market'
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access
        '500':
          description: internal server error
  /markets/{id}:
    get:
      tags:
        - Market
      summary: Get market by id
      operationId: getMarketById
      description: To get a specific market by id. Only administrators can use this operation. If you want to get a specific market by id, use the **getMarketById** operation.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          description: market id
          required: true
          schema:
            type: array
            items:
              type: string
              example: AQA9CNo0cXNLt6sZp5Uc5P0
          style: simple
      responses:
        '200':
          description: market
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/market'
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access
        '404':
          description: market not found
    put:
      tags:
        - Market
      summary: Update market
      operationId: updateMarket
      description: To update a market by id. Only administrators can use this operation. If you want to update a market, use the **updateMarket** operation.
      parameters:
        - in: path
          name: id
          description: market id
          required: true
          schema:
            type: array
            items:
              type: string
              example: AQA9CNo0cXNLt6sZp5Uc5P0
          style: simple
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/market'
              properties: {}
      responses:
        '200':
          description: market updated
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access
        '500':
          description: internal server error
      security:
        - BearerAuth: []
    delete:
      tags:
        - Market
      summary: Delete market
      operationId: deleteMarket
      description: To delete a market by id. Only administrators can use this operation. If you want to delete a market, use the **deleteMarket** operation.
      parameters:
        - in: path
          name: id
          description: market id
          required: true
          schema:
            type: array
            items:
              type: string
              example: AQA9CNo0cXNLt6sZp5Uc5P0
          style: simple
      responses:
        '200':
          description: market deleted
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access
        '500':
          description: internal server error
      security:
        - BearerAuth: []
  /markets/{company_id}/company:
    get:
      tags:
        - Market
      summary: Get all the market done by a specific company
      description: To get all the market done by a specific company. Only administrators can use this operation.
      operationId: getMarketByCompany
      parameters:
        - name: company_id
          in: path
          description: company id
          required: true
          schema:
            type: array
            items:
              type: string
              example: AQA9CNo0cXNLt6sZp5Uc5P0
          style: simple
        - in: query
          name: limit
          description: limit
          required: false
          schema:
            type: integer
            example: 10
          style: simple
        - in: query
          name: offset
          description: offset
          required: false
          schema:
            type: integer
            example: 0
          style: simple
      responses:
        '200':
          description: market
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/market'
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access
        '500':
          description: internal server error
      security:
        - BearerAuth: []
  /market_audits:
    post:
      tags:
        - Market_audit
      summary: Create a market audit object
      operationId: createMarketAudit
      description: To create a market audit between the company and the farmers. This information is used in the company dashboard to display all the market audits. Only administrators can use this operation.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/market_audit'
      responses:
        '201':
          description: market audit created
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access
        '500':
          description: internal server error
      security:
        - BearerAuth: []
  /inspection_data:
    post:
      tags:
        - Inspection_data
      summary: Create inspection data
      description: Create inspection data for each farm inspected.
      operationId: createInspectionData
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/inspection_data'
      responses:
        '201':
          description: inspection data created
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access
        '500':
          description: internal server error
  /inspection_data/{project_id}:
    get:
      tags:
        - Inspection_data
      summary: Get project inspection data by project_id
      description: To get a specific inspection data by id. Only administrators can use this operation. If you want to get a specific inspection data by id, use the **getProjectInspectionData** operation.
      parameters:
        - name: project_id
          in: path
          description: inspection data id
          required: true
          schema:
            type: string
            example: AQA9CNo0cXNLt6sZp5Uc5P0
          style: simple
        - name: limit
          in: query
          description: limit
          required: false
          schema:
            type: integer
            example: 10
          style: simple
        - name: offset
          in: query
          description: offset
          required: false
          schema:
            type: integer
            example: 0
          style: simple
      operationId: getProjectInspectionData
      responses:
        '200':
          description: inspection data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inspection_data'
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access
        '404':
          description: inspection data not found
        '500':
          description: internal server error
  /subscriptions:
    post:
      tags:
        - Company
      summary: Subscribe company to an offer plan
      operationId: subscribeCompanyToOfferPlan
      description: To subscribe a company to an offer plan. This information is used in the company dashboard to display all the subscriptions. Only administrators can use this operation.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/subscription'
      responses:
        '201':
          description: company subscribed to an offer plan
        '400':
          description: Invalid Input
        '500':
          description: internal server error
  /subscriptions/{id}:
    get:
      tags:
        - Subscription
      summary: Get subscription by id
      operationId: getSubscriptionById
      description: To get a specific subscription by id. Only administrators can use this operation. If you want to get a specific subscription by id, use the **getSubscriptionById** operation.
      parameters:
        - name: id
          in: path
          description: subscription id
          required: true
          schema:
            type: array
            items:
              type: string
              example: AQA9CNo0cXNLt6sZp5Uc5P0
          style: simple
      responses:
        '200':
          description: subscription
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subscription'
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access
        '404':
          description: subscription not found
  /subscriptions/{company_id}/company:
    patch:
      tags:
        - Company
      summary: Cancel company subscription
      description: To get the subscription made by a specific company.
      operationId: cancelCompanySubscription
      security:
        - BearerAuth: []
      parameters:
        - name: company_id
          in: path
          description: company id
          required: true
          schema:
            example: AQA9CNo0cXNLt6sZp5Uc5P0
            type: string
      responses:
        '201':
          description: company subscription cancelled
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access
        '500':
          description: internal server error
  /trainings:
    post:
      tags:
        - Training
      summary: Create a training data
      operationId: createTraining
      description: To create a training data. This information is used in the company dashboard to display all the training data. Only administrators can use this operation.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/training'
      responses:
        '201':
          description: training data created
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access
        '500':
          description: internal server error
      security:
        - BearerAuth: []
    get:
      tags:
        - Training
      summary: Get all training data
      operationId: getAllTraining
      description: To get all training data. Only administrators can use this operation. If you want to get all training data, use the **getAllTraining** operation.
      parameters:
        - name: skip
          in: query
          description: number of items to skip
          required: true
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: max records to return
          required: true
          schema:
            type: integer
            format: int32
        - name: company_id
          in: query
          required: false
          schema:
            type: string
            format: cuid
          description: the id of the company
      responses:
        '200':
          description: training data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/training'
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access
        '500':
          description: internal server error
      security:
        - BearerAuth: []
  /trainings/{id}:
    get:
      tags:
        - Training
      summary: Get specific training
      operationId: getTraining
      description: To get a specific training by id. Only administrators can use this operation. If you want to get a specific training by id, use the **getTraining** operation.
      parameters:
        - in: path
          name: id
          description: training id
          required: true
          schema:
            type: array
            items:
              type: string
              example: AQA9CNo0cXNLt6sZp5Uc5P0
          style: simple
      responses:
        '200':
          description: training
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/training'
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access
        '404':
          description: training not found
  /transaction:
    post:
      tags:
        - 💰 Transactions
      summary: Create a transaction
      description: |
        Create a transaction made at the end of market that represents the information about this hand on operation.

        **Required Permissions:** `write:transactions`

        **Business Rules:**
        - Transaction amount must be positive
        - Transaction must be associated with a valid market session
        - Transaction status starts as 'pending' and can be updated
        - Only authorized users can create transactions
      operationId: createTransaction
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/transaction'
            examples:
              basic_transaction:
                summary: Basic transaction
                description: Create a transaction with minimal information
                value:
                  market_id: clh1234567890abcdef
                  farmer_id: clh1234567890abcdef
                  amount: 150000
                  currency: NGN
                  transaction_type: purchase
              detailed_transaction:
                summary: Detailed transaction
                description: Create a transaction with full details
                value:
                  market_id: clh1234567890abcdef
                  farmer_id: clh1234567890abcdef
                  amount: 150000
                  currency: NGN
                  transaction_type: purchase
                  description: Cocoa beans purchase - 500kg at 300 NGN/kg
                  payment_method: cash
                  reference_number: TXN-2024-001
      responses:
        '201':
          description: Transaction created successfully
          headers:
            Location:
              description: URL of the created transaction resource
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transaction'
              example:
                id: clh1234567890abcdef
                market_id: clh1234567890abcdef
                farmer_id: clh1234567890abcdef
                amount: 150000
                currency: NGN
                transaction_type: purchase
                status: pending
                created_at: '2024-01-15T10:30:00Z'
                updated_at: '2024-01-15T10:30:00Z'
        '400':
          $ref: '#/components/responses/ValidationError-2'
        '401':
          $ref: '#/components/responses/UnauthorizedError-2'
        '403':
          $ref: '#/components/responses/ForbiddenError-2'
        '409':
          description: Transaction already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Transaction Already Exists
                  message:
                    type: string
                    example: A transaction with this reference already exists
                  code:
                    type: string
                    example: TRANSACTION_ALREADY_EXISTS
        '500':
          $ref: '#/components/responses/ServerError-2'
    get:
      tags:
        - 💰 Transactions
      summary: List all transactions
      description: |
        Retrieve a paginated list of transactions with optional filtering capabilities.

        **Required Permissions:** `read:transactions`

        **Filtering Options:**
        - Filter by market ID
        - Filter by farmer ID
        - Filter by transaction type
        - Filter by status
        - Filter by date range
        - Filter by amount range

        **Pagination:**
        - Default limit: 20 items per page
        - Maximum limit: 100 items per page
      operationId: getAllTransaction
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PaginationLimit'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/CompanyId'
        - $ref: '#/components/parameters/DateRangeStart'
        - $ref: '#/components/parameters/DateRangeEnd'
        - name: market_id
          in: query
          description: Filter by market ID
          required: false
          schema:
            type: string
            format: cuid
            example: clh1234567890abcdef
        - name: farmer_id
          in: query
          description: Filter by farmer ID
          required: false
          schema:
            type: string
            format: cuid
            example: clh1234567890abcdef
        - name: transaction_type
          in: query
          description: Filter by transaction type
          required: false
          schema:
            type: string
            enum:
              - purchase
              - payment
              - refund
              - adjustment
            example: purchase
        - name: status
          in: query
          description: Filter by transaction status
          required: false
          schema:
            type: string
            enum:
              - pending
              - completed
              - failed
              - cancelled
            example: completed
        - name: min_amount
          in: query
          description: Minimum transaction amount
          required: false
          schema:
            type: number
            example: 1000
        - name: max_amount
          in: query
          description: Maximum transaction amount
          required: false
          schema:
            type: number
            example: 1000000
      responses:
        '200':
          description: Transactions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/transaction'
                  pagination:
                    type: object
                    properties:
                      limit:
                        type: integer
                        example: 20
                      offset:
                        type: integer
                        example: 0
                      total:
                        type: integer
                        example: 150
                      page_count:
                        type: integer
                        example: 8
                      has_next:
                        type: boolean
                        example: true
                      has_prev:
                        type: boolean
                        example: false
                  summary:
                    type: object
                    properties:
                      total_amount:
                        type: number
                        example: 15000000
                      total_count:
                        type: integer
                        example: 150
                      average_amount:
                        type: number
                        example: 100000
              example:
                data:
                  - id: clh1234567890abcdef
                    market_id: clh1234567890abcdef
                    farmer_id: clh1234567890abcdef
                    amount: 150000
                    currency: NGN
                    transaction_type: purchase
                    status: completed
                    created_at: '2024-01-15T10:30:00Z'
                    updated_at: '2024-01-15T10:30:00Z'
                  - id: clh1234567890abcdeg
                    market_id: clh1234567890abcdef
                    farmer_id: clh1234567890abcdeg
                    amount: 200000
                    currency: NGN
                    transaction_type: purchase
                    status: completed
                    created_at: '2024-01-15T09:15:00Z'
                    updated_at: '2024-01-15T09:15:00Z'
                pagination:
                  limit: 20
                  offset: 0
                  total: 150
                  page_count: 8
                  has_next: true
                  has_prev: false
                summary:
                  total_amount: 15000000
                  total_count: 150
                  average_amount: 100000
        '400':
          $ref: '#/components/responses/ValidationError-2'
        '401':
          $ref: '#/components/responses/UnauthorizedError-2'
        '403':
          $ref: '#/components/responses/ForbiddenError-2'
        '500':
          $ref: '#/components/responses/ServerError-2'
    put:
      tags:
        - 💰 Transactions
      summary: Update a transaction
      description: |
        Update an existing transaction's information.

        **Required Permissions:** `write:transactions`

        **Business Rules:**
        - Cannot update completed transactions
        - Cannot change transaction amount after completion
        - Only transaction owner or admin can update transaction
        - Status changes are logged for audit purposes
      operationId: updateTransaction
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum:
                    - pending
                    - completed
                    - failed
                    - cancelled
                  description: Transaction status
                  example: completed
                description:
                  type: string
                  description: Transaction description
                  example: Updated transaction description
                reference_number:
                  type: string
                  description: Reference number for the transaction
                  example: TXN-2024-001
                payment_method:
                  type: string
                  enum:
                    - cash
                    - bank_transfer
                    - mobile_money
                    - check
                  description: Payment method used
                  example: bank_transfer
            examples:
              update_status:
                summary: Update transaction status
                description: Update transaction status to completed
                value:
                  status: completed
                  description: Payment received via bank transfer
              update_details:
                summary: Update transaction details
                description: Update transaction with additional details
                value:
                  status: completed
                  description: Payment received via bank transfer
                  reference_number: TXN-2024-001
                  payment_method: bank_transfer
      responses:
        '200':
          description: Transaction updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transaction'
              example:
                id: clh1234567890abcdef
                market_id: clh1234567890abcdef
                farmer_id: clh1234567890abcdef
                amount: 150000
                currency: NGN
                transaction_type: purchase
                status: completed
                description: Payment received via bank transfer
                reference_number: TXN-2024-001
                payment_method: bank_transfer
                created_at: '2024-01-15T10:30:00Z'
                updated_at: '2024-01-15T11:30:00Z'
        '400':
          $ref: '#/components/responses/ValidationError-2'
        '401':
          $ref: '#/components/responses/UnauthorizedError-2'
        '403':
          $ref: '#/components/responses/ForbiddenError-2'
        '404':
          description: Transaction not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Transaction Not Found
                  message:
                    type: string
                    example: Transaction with the specified ID was not found
                  code:
                    type: string
                    example: TRANSACTION_NOT_FOUND
        '409':
          description: Transaction update conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Transaction Update Conflict
                  message:
                    type: string
                    example: Cannot update completed transaction
                  code:
                    type: string
                    example: TRANSACTION_UPDATE_CONFLICT
        '500':
          $ref: '#/components/responses/ServerError-2'
    delete:
      tags:
        - 💰 Transactions
      summary: Delete a transaction
      description: |
        Delete a transaction from the system.

        **Required Permissions:** `write:transactions`

        **Business Rules:**
        - Cannot delete completed transactions
        - Cannot delete transactions older than 30 days
        - Only transaction owner or admin can delete transaction
        - Soft delete - marks transaction as deleted but preserves data
      operationId: deleteTransaction
      security:
        - BearerAuth: []
      responses:
        '204':
          description: Transaction deleted successfully
        '400':
          description: Cannot delete transaction
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Cannot Delete Transaction
                  message:
                    type: string
                    example: Cannot delete completed transaction
                  code:
                    type: string
                    example: TRANSACTION_ALREADY_COMPLETED
        '401':
          $ref: '#/components/responses/UnauthorizedError-2'
        '403':
          $ref: '#/components/responses/ForbiddenError-2'
        '404':
          description: Transaction not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Transaction Not Found
                  message:
                    type: string
                    example: Transaction with the specified ID was not found
                  code:
                    type: string
                    example: TRANSACTION_NOT_FOUND
        '500':
          $ref: '#/components/responses/ServerError-2'
  /campaign_stocks:
    post:
      tags:
        - Camoaign_stock
      summary: Create a campaign stock of products
      description: Create a campaign stock of products that wasn't sold during a specific campaign. this operation is only performed by the Administration of the company registered.
      operationId: createcampaignstock
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/campaign_stock'
      responses:
        '201':
          description: campaign stock created Successfully
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access
        '500':
          description: internal server error
  /campaign_stocks/{campaign_id}:
    get:
      tags:
        - Camoaign_stock
      summary: Get campaign stock by campaign id
      description: get the campaign stock for specific campaign by campaign id
      operationId: getCampaignStock
      parameters:
        - name: campaign_id
          in: path
          description: campaign id
          required: true
          schema:
            type: string
            example: AQA9CNo0cXNLt6sZp5Uc5P0
          style: simple
        - name: company_id
          in: query
          description: the identifier of specific company for which we need the stock
          schema:
            type: string
            example: AQA9CNo0cXNLt6sZp5Uc5P0
          required: false
        - name: limit
          in: query
          description: Limit the number of results returned
          schema:
            type: integer
            example: 10
          required: false
        - name: skip
          in: query
          description: the number of results to fetch for data base par page
          schema:
            type: integer
            example: 0
          required: false
      responses:
        '200':
          description: campaign stock
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/campaign_stock'
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access
  /requirements:
    post:
      tags:
        - Requirement
      summary: Create a requirement
      description: To create a requirement from Rainforest Alliance certification requirement dedicated for the offer plan.
      operationId: createRequirement
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/requirement'
      responses:
        '201':
          description: requirement created
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access
        '500':
          description: internal server error
    get:
      tags:
        - Requirement
      summary: Get all requirements
      operationId: getAllRequirements
      description: To get all requirements. Only administrators can use this operation. If you want to get all requirements, use the **getAllRequirements** operation.
      responses:
        '200':
          description: requirements
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/requirement'
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access
        '500':
          description: internal server error
  /requirement/{id}:
    patch:
      tags:
        - Requirement
      summary: Update a requirement
      operationId: updateRequirement
      description: To update a requirement. Only administrators can use this operation. If you want to update a requirement, use the **updateRequirement** operation.
      parameters:
        - name: id
          in: path
          description: requireement id
          required: true
          schema:
            type: string
            example: AQA9CNo0cXNLt6sZp5Uc5P0
          style: simple
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requirement'
              properties: {}
      responses:
        '200':
          description: requirement updated
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access
        '500':
          description: internal server error
    get:
      tags:
        - Requirement
      summary: Get requirement by id
      operationId: getRequirement
      description: To get a specific requirement. Only administrators can use this operation. If you want to get a specific requirement, use the **getRequirement** operation.
      parameters:
        - name: id
          in: path
          description: requirement id
          required: true
          schema:
            type: string
            example: AQA9CNo0cXNLt6sZp5Uc5P0
          style: simple
      responses:
        '200':
          description: requirement
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/requirement'
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access
        '404':
          description: requirement not found
    delete:
      tags:
        - Requirement
      summary: Delete a Requirement
      operationId: deleteRequirement
      description: To delete a specific requirement.
      parameters:
        - name: id
          in: path
          description: Requirement id
          required: true
          schema:
            type: string
            example: AQA9CNo0cXNLt6sZp5Uc5P0
          style: simple
      responses:
        '200':
          description: Requirement deleted
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access
        '404':
          description: No such Requirement
        '500':
          description: internal server error
  /requirement/price_plan/{plan_id}:
    get:
      tags:
        - Requirement
      summary: Get requirement by id
      operationId: findAllRequirements
      description: To get a specific requirement. Only administrators can use this operation. If you want to get a specific requirement, use the **getRequirement** operation.
      parameters:
        - name: plan_id
          in: path
          description: requirement id
          required: true
          schema:
            type: string
            example: AQA9CNo0cXNLt6sZp5Uc5P0
          style: simple
      responses:
        '200':
          description: requirement
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/requirement'
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access
        '404':
          description: requirement not found
  /collector_agents:
    post:
      tags:
        - CollectorAgent
      summary: Create a new collector agent
      description: Create a new collector agent which is in charge of collecting data from farmer. only the administrator of the project can create a new collector agent
      operationId: createCollectorAgent
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/collector_agent'
      responses:
        '201':
          description: CollectorAgent created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '422':
          description: Unprocessable Entity
        '500':
          description: internal server error
    get:
      tags:
        - CollectorAgent
      summary: Get all collector agents
      operationId: getAllCollectorAgents
      description: To get all collector agents. Only administrators can use this operation. If you want to get all collector agents, use the **getAllCollectorAgents** operation.
      parameters:
        - name: page
          in: query
          description: page number
          required: false
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: page size
          required: false
          schema:
            type: integer
            example: 20
      responses:
        '200':
          description: CollectorAgents
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/collector_agent'
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access
        '500':
          description: internal server error
  /collector_agents/{id}:
    delete:
      tags:
        - CollectorAgent
      summary: Delete collector agent
      description: the collector agent could be deleted at any moment by the company administrator.
      operationId: deleteCollectorAgent
      parameters:
        - in: path
          name: id
          description: collector agent id
          required: true
          schema:
            type: string
            example: AQA9CNo0cXNLt6sZp5Uc5P0
          style: simple
      responses:
        '200':
          description: collector agent deleted
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access
        '500':
          description: internal server error
  /training_session:
    post:
      tags:
        - Participant
      summary: create participant
      description: To create a participant. This information is used in the company dashboard to display all the participants. Only administrators can use this operation.
      operationId: createParticipant
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/training_session'
  /price_plan_requirements:
    post:
      tags:
        - PricePlanRequirement
      summary: create a price plan requirement
      description: To create a price plan requirement that represents the requirements corresponding to a particular price plan.
      operationId: createPricePlanRequirement
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/price_plan_requirement'
      responses:
        '201':
          description: price plan requirement created
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access
        '500':
          description: internal server error
    get:
      tags:
        - PricePlanRequirement
      summary: get all requirement corresponding to a particular offer
      description: To list all requirements corresponding to a particular offer plan.
      operationId: getAllPricePlanRequirement
      security:
        - BearerAuth: []
      parameters:
        - name: price_plan_id
          in: query
          description: get the receipt produced during a single market
          schema:
            format: cuid
            type: string
          required: false
        - name: page
          in: query
          description: page number
          required: false
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: page size
          required: false
          schema:
            type: integer
            example: 20
      responses:
        '200':
          description: price plan requirement
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/price_plan_requirement'
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access
        '500':
          description: internal server error
webhooks:
  userInfo:
    post:
      summary: New user webhook
      description: Information about a new subscription entring in the system.
      operationId: susbscriptionInfo
      tags:
        - susbscription
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/subscription'
      responses:
        '200':
          description: Successfully retrieved information about a new subscription.
      security:
        - BearerAuth: []
components:
  schemas:
    AuthResponse:
      $ref: '#/components/schemas/auth_response'
    Tokens:
      $ref: '#/components/schemas/tokens'
    Session:
      $ref: '#/components/schemas/session'
    user:
      type: object
      properties:
        id:
          type: string
          format: cuid
          readOnly: true
          description: The unique Id of the user.
        username:
          type: string
          description: username of the user
        email:
          type: string
          description: email of the user
        password:
          type: string
          description: password of the user
        first_name:
          type: string
          description: first name of the user
        last_name:
          type: string
          description: last name of the user
        title:
          type: string
          format: array
          required:
            - ADG
            - MEMBER
          description: role of the user
        company_id:
          type: string
          format: cuid
          description: the companies ID to which the user belongs to.
        phone_number:
          type: string
          description: phone number of the user
        status:
          type: string
          format: array
          description: status of the user
          required:
            - active
            - banned
            - inactive
        role:
          type: string
          format: array
          description: status of the user
          required:
            - FARMER
            - EMPLOYEE
            - AUDITOR
            - TRAINER
            - AGENT
            - IT_SUPPORT
            - SALES
        famer_attached_contract_url:
          type: string
          description: the contact that links the farmer and the company.
        profileUrls:
          description: The list of URLs to user's social media profile if any. You must provide the url with the scheme (`http` or `https`).
          type: array
          maxItems: 10
          xml:
            name: profileUrls
            wrapped: true
          items:
            type: string
            format: url
          example:
            - https://www.facebook.com/example
            - https://www.linkedin.com/in/example
        created_at:
          type: string
          format: date-time
          description: The date and time when the user was created.
        updated_at:
          type: string
          format: date-time
          description: The date and time when the user was updated.
    admin:
      description: To specify user profile with admin permissions. This type of user is also referred to as an **administrator**.
      allOf:
        - $ref: '#/components/schemas/user'
        - type: object
          properties:
            userType:
              type: string
              enum:
                - ADG
                - MEMBER
              default: ADG
    member:
      description: To specify a user with basic (restricted) permissions. In total, there are 5 permission levels, but basic users can only use the first three.
      allOf:
        - $ref: '#/components/schemas/user'
        - type: object
          properties:
            userType:
              type: string
              enum:
                - ADG
                - MEMBER
    company:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          format: cuid
          description: The unique Id of the company
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: Name of the company
          example: senima Co.
        head_office_email:
          type: string
          description: The email used by people to address issues to Head office manager directly
        slug:
          type: string
          minLength: 1
          description: Name of the company
          example: senima Co.
        address:
          type: string
          description: Address of the company
        country:
          type: string
          description: country of the company
        city:
          type: string
          description: City of the company
        phone_number:
          type: string
          description: Phone number of the company
        email:
          type: string
          description: Email of the company
        website:
          type: string
          description: Website of the company
        description:
          type: string
          description: Description of the company
        logo:
          type: string
          description: Logo of the company
        paypal_id:
          type: string
          description: Paypal id of the company
        timeZone:
          type: string
          description: Timezone of the company that is subscribing to the plan
        payment_mode:
          type: string
          description: Payment mode of the company
        sector_of_activity:
          type: string
          description: Sector of activity of the company
        company_paypal_email:
          type: string
          description: Email of the company that he uses to connect with paypal account
        created_at:
          type: string
          format: date-time
          description: Date and time when the company was created
        updated_at:
          type: string
          format: date-time
          description: Date and time when the company was updated
    api-response-success-schema:
      type: object
      properties:
        message:
          type: string
        data:
          type: object
          format: json
        status:
          type: number
          example: 200 | 201 | 202 | 204 | 400 | 401 | 403 | 404 | 500
      required:
        - message
        - data
        - status
    campaign:
      type: object
      properties:
        id:
          type: string
          format: cuid
          readOnly: true
          description: The unique Id of the campaign.
        name:
          type: string
          description: title of the campaign
          readOnly: true
        description:
          type: string
          description: description of the campaign
        start_date:
          type: string
          format: date
          description: start date of the campaign
        end_date:
          type: string
          format: date
          description: end date of the campaign
        status:
          type: string
          enum:
            - OPEN
            - CLOSED
          description: status of the campaign
        created_at:
          type: string
          format: date-time
          example: '2020-01-01T00:00:00Z'
          description: the date and time when the campaign was created
        updated_at:
          type: string
          format: date-time
          example: '2020-01-01T00:00:00Z'
          description: the date and time when the campaign was updated
    price_plan:
      type: object
      properties:
        id:
          type: string
          format: cuid
          readOnly: true
          description: The unique Id of the price plan.
        active:
          type: boolean
          description: To indicate if the price plan is active or not
        price:
          type: string
          example: $2000
          description: ' To indicate the amount of the price plan'
        status:
          type: string
          example: 'off'
          format: object
          enum:
            - 'on'
            - 'off'
          description: To indicate the status of the corresponding price plan if it's set to be functional
        currency:
          type: string
          format: currency
          example: USD
          description: To indicate the currency of the price plan
        product_name:
          type: string
          description: To indicate the name of the corresponding price plan
          example: Gold | Silver | Bronze
          enum:
            - Gold
            - Silver
            - Bronze
        product_type:
          type: string
          description: To indicate the type of the corresponding price plan
          example: Fixed pricing | Volume pricing | etc
        plan_name:
          type: string
          description: To indicate the name of the corresponding price plan
          example: Gold | Silver | Bronze
        description:
          type: string
          description: To indicate the description of the corresponding price plan. its benefits and features
        billing_cycle:
          type: string
          description: To indicate the billing cycle of the corresponding price plan
          example: Every 1 year | Monthly | etc
        number_of_billing_cycles:
          type: string
          description: To indicate the number of billing cycles of the corresponding price plan
          example: Unlimited
        auto_renewal:
          type: boolean
          description: To indicate the renewal options of the corresponding price plan
        cancellation_policy:
          type: string
          description: To indicate the cancellation policy of the corresponding price plan
          example: No refunds
        created_at:
          type: string
          format: date-time
          example: '2020-01-01T00:00:00Z'
          description: the date and time when the price plan was created
        updated_at:
          type: string
          format: date-time
          example: '2020-01-01T00:00:00Z'
          description: the date and time when the price plan was updated
    project:
      type: object
      properties:
        id:
          description: the unique identifier of the project created by a company.
          type: string
          format: cuid
          readOnly: true
        type:
          description: the type of the project created by a company.
          type: string
          format: array
          items:
            type: string
            required:
              - INITIAL_INSPECTION
              - INTERNAL_INSPECTION
              - AUTO_EVALUATION
        company_id:
          description: the companies ID to which the project belongs to.
          type: string
          format: cuid
          example: AQA9CNo0cXNLt6sZp5Uc5P0
        title:
          description: the title of the project
          type: string
          example: internal inspection
        description:
          description: the description of the project
          type: string
          example: internal inspection
        sector_activity:
          description: the sector of activity of the project
          type: string
          example: engineering
        country:
          type: string
          format: array
          description: The countries where the project will take place
          example: Cameroon
        campain_id:
          type: string
          description: the id of the campaign
        city:
          type: string
          format: array
          description: The city where the project will take place
          items:
            type: string
          example:
            - Douala
            - buea
            - yaounde
        status:
          type: string
          description: The status of the project
          example:
            - active
            - draft
            - archived
          enum:
            - ARCHIVED
            - DRAFT
            - ACTIVE
            - DELETED
            - DEPLOYED
        start_date:
          description: The start date of the project
          type: string
          format: date-time
          example: '2022-10-10T00:00:00.000Z'
        end_date:
          description: The end date of the project
          type: string
          format: date-time
          example: '2022-10-10T00:00:00.000Z'
        project_structure:
          description: The former structure of the project
          type: string
          format: object
          example:
            title: string
            description: string
            start_date: string
            end_date: string
            status: string
            ...: null
        created_at:
          type: string
          format: date-time
          description: The date and time when the project was created.
          example: '2022-10-10T00:00:00.000Z'
        updated_at:
          type: string
          format: date-time
          description: The date and time when the project was updated.
          example: '2022-10-10T00:00:00.000Z'
        deleted_at:
          type: string
          format: date-time
          description: The date and time when the project was deleted.
        slug:
          type: string
          description: the slug of the project title
          example: internal_inspection_for_local_farmers
        archived_at:
          type: string
          format: date-time
          example: '2022-10-10T00:00:00.000Z'
        draft_at:
          type: string
          format: date-time
          example: '2022-10-10T00:00:00.000Z'
        deployed_at:
          type: string
          format: date-time
          example: '2022-10-10T00:00:00.000Z'
    farm:
      type: object
      properties:
        id:
          type: string
          format: cuid
          readOnly: true
          description: The unique Id of the farm.
        location:
          type: object
          description: geographical position of the farm
          properties:
            lat:
              type: number
              description: Latitude of the farm
            lng:
              type: number
              description: Longitude of the farm
        farmer_id:
          type: string
          format: cuid
          description: The unique Id of the farmer owning the farm.
        creation_date:
          type: string
          format: date-time
          description: The date and time when the farm was created.
        village:
          type: string
          description: Village where is located the farm
        division:
          type: string
          description: The name of the council where the farm is located
        council:
          type: string
          description: The name of the council where the farm is located
        farm_image_url:
          type: string
          format: uri
          description: The URL of the farm image
        created_at:
          type: string
          format: date-time
          example: '2020-01-01T00:00:00Z'
          description: the date and time when the farm was created
        updated_at:
          type: string
          format: date-time
          example: '2020-01-01T00:00:00Z'
          description: the date and time when the farm was updated
    project_audit:
      type: object
      properties:
        id:
          type: string
          format: cuid
          readOnly: true
          description: The unique Id of the project_audit.
        project_id:
          type: string
          format: cuid
          readOnly: true
          description: The project from which the audit is donne
        user_id:
          type: string
          format: cuid
          readOnly: true
          description: The employee conducting of the project
        type_of_project:
          type: string
          description: The type of the project the user where conducting
          example: internal inspection
        created_at:
          type: string
          format: date-time
          example: '2020-01-01T00:00:00Z'
          description: the date and time when the project_audit was created
        updated_at:
          type: string
          format: date-time
          example: '2020-01-01T00:00:00Z'
          description: the date and time when the project_audit was updated
    receipt:
      type: object
      properties:
        id:
          type: string
          format: cuid
          readOnly: true
          example: cuid:123e4567-e89b-12d3-a456-426655440000
          description: The unique Id of the receipt.
        market_id:
          type: string
          format: cuid
          example: cuid:123e4567-e89b-12d3-a456-426655440000
          description: The unique Id of the market.
        village:
          type: string
          example: Village 1
          description: the village of the market.
        farmer_id:
          type: string
          format: cuid
          example: cuid:123e4567-e89b-12d3-a456-426655440000
          description: The unique Id of the farmer.
        date:
          type: string
          format: date-time
          example: '2022-10-10T00:00:00.000Z'
          description: The date of the receipt.
        net_weight_in_kg:
          type: number
          example: 100
          description: The net weight of the receipt.
        quantity_in_bags:
          type: number
          example: 10
          description: The quantity of the receipt.
        humidity_level_of_product:
          type: number
          format: float
          example: 10
          description: The humidity level of the receipt.
        net_weight_for_sale:
          type: number
          example: 100
          description: The net weight of the receipt for sale.
        refraction_humidity_or_quality:
          type: number
          format: float
          example: 10
          description: The refraction of the receipt.
          readOnly: true
        unit_amount_per_kg:
          type: number
          example: 100 per kg
          description: The unit amount of the receipt.
          readOnly: true
        total_amount:
          type: number
          example: 10000
          description: The total amount of the receipt.
          readOnly: true
        currency:
          type: string
          format: currency
          example: USD
          description: The currency of the receipt.
          readOnly: true
        farmer_picture_urls:
          type: string
          format: array
          example:
            - https://senima.com/wp-content/uploads/2022/01/gold.png
          description: To store the images of the farmer with his product
          readOnly: true
        statutory_prerequisite:
          type: number
          example: 10
          description: To specify the statutory_prerequisite value predefined between the farmer and company.
          readOnly: true
        net_paid:
          type: number
          example: 100
          description: The net paid of the receipt.
          readOnly: true
        farmer_signature:
          type: string
          description: The farmer signature of the receipt.
          readOnly: true
        company_signature:
          type: string
          description: The company signature of the receipt.
          readOnly: true
        product_name:
          type: string
          example: Cocoa
          description: To specify the product name defined in the receipt.
          readOnly: true
        receipt_number:
          type: string
          example: '12558'
          description: The unique Id of the delivery receipt.
          readOnly: true
    farm_coodinates:
      type: object
      properties:
        id:
          type: string
          format: cuid
          readOnly: true
          description: The unique Id of the coordinate related to specific farm.
        estimated_area:
          type: number
          format: float
          description: The estimated area of the farm.
        mapping_date:
          type: string
          format: date-time
          description: The date when the farm coordinate was mapped.
        farm_id:
          type: string
          format: cuid
          description: The unique Id of the farm related to specific farm coordinate.
        located_at:
          type: object
          format: string
          properties:
            lat:
              type: number
              description: The latitude of the farm coordinate.
            lng:
              type: number
              description: The longitude of the farm coordinate.
          description: The geographical coordinates of the farm coordinate.
        coordinates:
          type: array
          description: The list of all the geographical coordinates representing the farm total surface area.
          items:
            type: object
            properties:
              lat:
                type: number
                description: The latitude of the farm coordinate.
              lng:
                type: number
                description: The longitude of the farm coordinate.
        collected_by:
          type: string
          format: cuid
          description: The unique Id of the user who created the farm coordinate.
    market:
      type: object
      properties:
        id:
          type: string
          format: cuid
          readOnly: true
          description: The unique Id of the market.
        company_id:
          type: string
          format: cuid
          readOnly: true
          description: The unique Id of the company.
        start_date:
          type: string
          format: date-time
          description: The start date of the market.
        end_date:
          type: string
          format: date-time
          description: The end date of the market.
        market_number:
          type: number
          description: To specify the number assigned to the market by the company.
        bordereau_vente_url:
          type: string
          format: uri
          description: To  specify the bordereau de vente of the market.
        bon_entree_magazin_url:
          type: string
          format: uri
          description: To specify the bon entree en magazin offered by the third company buyer after the market took place and the product is at their disposal.
        created_at:
          type: string
          format: date-time
          description: Date and time when the market was created.
          example: null
        updated_at:
          type: string
          format: date-time
          description: Date and time when the market was created.
          example: null
        status:
          type: string
          description: Status of the market.
          example: open | closed
        code:
          type: string
          description: Code of the market (cargaison)
        product_quantity:
          type: integer
          description: Product quantity of the market.
    market_audit:
      type: object
      properties:
        id:
          description: the unique identifier of the company.
          type: string
          format: cuid
          readOnly: true
        market_id:
          description: the identifier of the concerned market that was handled by the company user.
          type: string
          format: cuid
          readOnly: true
        user_id:
          description: the id of the user in charge of the market
          type: string
          format: cuid
          readOnly: true
        date:
          type: string
          format: date-time
          description: the date of the market took place
          example: '2020-01-01T00:00:00Z'
    inspection_data:
      type: object
      properties:
        id:
          type: string
          format: cuid
          readOnly: true
          description: The unique Id of the inspection data.
        project_id:
          type: string
          format: cuid
          description: the project from which the inspection is donne
        project_data:
          type: object
          format: json
          description: the data from the fields of the project
        collected_by:
          type: string
          format: cuid
          description: The unique Id of the user who created the farm coordinate.
        project_data_url:
          type: string
          format: uri
          description: The URL of the project data.
        collected_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
          example: '2020-01-01T00:00:00Z'
          description: the date and time when the inspection data was created
        updated_at:
          type: string
          format: date-time
          example: '2020-01-01T00:00:00Z'
          description: the date and time when the inspection data was updated
    subscription:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          format: cuid
          example: dfsdfsdfsd1454f5d4f4s34fs3d
          description: To unique Id of the subscription made by a specific company.
        price_id:
          type: string
          readOnly: true
          format: cuid
          example: dfsdfsdfsd1454f5d4f4s34fs3d
          description: To uniquely identify  the plan subscribed by a specific company.
        company_id:
          type: string
          format: cuid
          example: dfsdfsdfsd1454f5d4f4s34fs3d
          description: To uniquely identify  the company subscribed to a plan.
        start_date:
          type: string
          format: date-time
          example: '2022-10-10T00:00:00.000Z'
        end_date:
          type: string
          format: date-time
          example: '2022-10-10T00:00:00.000Z'
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
            - CANCELLED
            - SUSPENDED
          description: To specify the status of the subscription
        description:
          description: To specify the description about the subscription
          type: string
        payment_mode:
          type: string
          enum:
            - Instant balance transfer.
            - Instant bank transfer
            - 'PayPal '
            - 'Card '
            - eCheque
        auto_renewal:
          type: boolean
          example: true
          description: To specify if the subscription should be renewed automatically
        billing_cycle:
          type: string
          example: yearly
          description: To specify at which rate the subscription should be billed
        last_notification_date:
          type: string
          format: date-time
          example: '2022-10-10T00:00:00.000Z'
          description: To specify when the last notification was sent
        grace_period_end:
          type: boolean
          example: true
          description: To specify if the grace period has ended
        created_at:
          type: string
          format: date-time
          example: '2022-10-10T00:00:00.000Z'
        updated_at:
          type: string
          format: date-time
          example: '2022-10-10T00:00:00.000Z'
    training:
      type: object
      properties:
        id:
          description: the unique identifier for the training object
          type: string
          format: cuid
          readOnly: true
        location:
          type: string
          description: To specify the location of the training
        title:
          type: string
          description: To specify the title of the training
          example: Training Title
        modules:
          type: string
          format: array
          description: To specify the modules of the training
          example:
            - Module 1
            - Module 2
        end_date:
          type: string
          format: date-time
          description: To specify the date the training ended
        start_date:
          type: string
          format: date-time
          description: To specify the date the training started
        company_id:
          type: string
          format: cuid
          description: the company id of the training
          example: 1jssbbjsbjsbjs221878dd817dd87sd
        training_sessions:
          type: string
          format: array
          description: the attendance sheets of the training
          example:
            - 1jssbbjsbjsbjs221878dd817dd87sd
        created_at:
          type: string
          format: date-time
          example: '2022-10-10T00:00:00.000Z'
          description: The date and time at which the transaction was created.
        updated_at:
          type: string
          format: date-time
          example: '2022-10-10T00:00:00.000Z'
          description: The date and time at which the transaction was updated.
    transaction:
      type: object
      properties:
        id:
          type: string
          format: cuid
          readOnly: true
          example: cuid:123e4567-e89b-12d3-a456-426655440000
          description: The unique Id of the transaction.
        market_id:
          type: string
          format: cuid
          example: cuid:123e4567-e89b-12d3-a456-426655440000
          description: The unique Id of the market.
        date:
          type: string
          format: date-time
          example: '2022-10-10T00:00:00.000Z'
          description: The date of the transaction.
        level_of_traceability:
          type: string
          example: identite preservee
          description: The level of traceability of the transaction.
        driver_name:
          type: string
          example: John Doe
          description: The name of the driver.
        quantity:
          type: number
          example: 10
          description: The quantity of the transaction.
        net_weight_declared_in_Ton:
          type: number
          example: 100
          description: The net weight declared of the transaction.
        humidity_level_of_product:
          type: number
          format: float
          example: 10
          description: The humidity of the product in the transaction.
        total_quantity_in_bags:
          type: number
          example: 10
          description: The quantity of bags of the transaction.
        receiver_name:
          type: string
          example: Jane Doe
          description: The name of the receiver.
        min_com_verif_agent_name_and_sig:
          type: string
          example: mincommerce_signature
          description: The mincommerce signature of the transaction.
        sender_signature:
          type: string
          example: sender_signature
          description: The sender signature of the transaction.
        driver_signature:
          type: string
          example: driver_signature
          description: The driver signature of the transaction.
        product_quality:
          type: string
          example: good
          description: The quality of the product.
        vehicule_immatriculation_number:
          type: string
          example: vehicule_number
          description: To specify the vehicule number of the transaction. It's in charge of transporting the product from buing plan the magazin of the other third company buyer.
        created_at:
          type: string
          format: date-time
          example: '2022-10-10T00:00:00.000Z'
          description: The date and time at which the transaction was created.
        updated_at:
          type: string
          format: date-time
          example: '2022-10-10T00:00:00.000Z'
          description: The date and time at which the transaction was updated.
    campaign_stock:
      type: object
      properties:
        id:
          type: string
          description: the unique identifier of a specific campaign stock
          format: cuid
          readOnly: true
        quantity:
          type: number
          description: the quantity stored as not sold for a specific campaign.
          format: int32
        weight:
          type: string
          description: the weight use to mesure the stock
          format: int32
          example: 5kg
        campaign_id:
          type: string
          format: cuid
          description: the identifier of the campaign
        company_id:
          description: the companies ID to which the stock belongs to.
          type: string
          format: cuid
          example: AQA9CNo0cXNLt6sZp5Uc5P0
        unit_of_mesure:
          description: The unit used to mesure the stock
          type: integer
          format: int32
          example: 5 Ton, 5kg
        created_at:
          type: string
          format: date-time
          description: the date and time when the stock was created
        updated_at:
          type: string
          format: date-time
          description: the date and time when the stock was updated
    requirement:
      type: object
      properties:
        id:
          type: string
          format: cuid
          readOnly: true
          description: The unique Id of the requirement.
        title:
          type: string
          description: To specify the label of the requirement used
          example: chapter 1 | chapter 2 | chapter 3 ...
        numero:
          type: string
          description: 'The number representing the entry in the title. '
        content:
          type: array
          format: json
          description: Content of the requirement
          items:
            type: object
            format: json
            properties:
              text:
                type: string
                description: Content of the requirement
              num:
                type: string
                description: Title of the requirement subtitle
              certif_de_group:
                type: object
                format: json
                properties:
                  direction_du_group:
                    type: string
                    description: auto check requirement
                  petite_exploitation_agricole:
                    type: string
                    description: auto check requirement
                  grande_exploitation_agricole:
                    type: string
                    description: auto check requirement
    collector_agent:
      type: object
      properties:
        id:
          description: the identifier for the collector agent
          type: string
          format: cuid
          readOnly: true
        code:
          description: a random code assigned to the collector agent for specific project
          type: string
          format: string
        name:
          description: the name of the collector agent
          type: string
        company_id:
          description: the company_id from which the collector agent belongs to and collects data for the project.
          type: string
          format: cuid
          readOnly: true
        created_at:
          description: the date and time when the collector agent was created
          type: string
          format: date-time
          example: '2020-01-01T00:00:00Z'
        updated_at:
          description: the date and time when the collector agent was updated
          type: string
          format: date-time
          example: '2020-01-01T00:00:00Z'
    training_session:
      type: object
      properties:
        id:
          type: string
          format: cuid
          readOnly: true
          description: The unique Id of the participant.
        first_name:
          type: string
          description: first name of the participant
        last_name:
          type: string
          description: last name of the participant
        email:
          type: string
          description: email of the participant
        signature:
          type: string
          description: To hold the digital the signature of the participant
        role:
          type: string
          description: To Specify the role of the participant
          example: Farmer, Trainer
        training_id:
          type: string
          format: cuid
          description: the company id of the training
          example: 1jssbbjsbjsbjs221878dd817dd87sd
        phone:
          type: string
          description: To Specify the phone number of the participant
        training_picture_urls:
          type: string
          format: array
          description: the images of the training
          example:
            - https://senima.com/wp-content/uploads/2022/01/gold.png
        report_url:
          type: string
          description: To specify the report of the training
          example: https://senima.com/wp-content/uploads/2022/01/report.pdf
        trainer_proof_of_competency:
          type: string
          format: array
          description: the training proof of competency of the trainer.
        created_at:
          type: string
          format: date-time
          example: '2020-01-01T00:00:00Z'
          description: the date and time when the participant was created
        updated_at:
          type: string
          format: date-time
          example: '2020-01-01T00:00:00Z'
          description: the date and time when the participant was updated
    price_plan_requirement:
      type: object
      properties:
        id:
          type: string
          format: (cuid1, cuid2)
          readOnly: true
          description: To indicate the unique Id of the price plan requirement.
        requiment_id:
          type: string
          format: cuid
          description: To indicate the ID corresponding to the requirement involved in the relation
        price_plan_id:
          type: string
          format: cuid
          description: To indicate the ID corresponding to the price plan involved in the relation
        created_at:
          type: string
          format: date-time
          example: '2020-01-01T00:00:00Z'
          description: To specify  the date and time when the price plan requirement was created
        updated_at:
          type: string
          format: date-time
          example: '2020-01-01T00:00:00Z'
          description: To specify the date and time when the price plan requirement was updated
    tokens:
      type: object
      properties:
        access_token:
          type: string
          description: JWT access token for API authentication
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        refresh_token:
          type: string
          description: JWT refresh token for token renewal
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        expires_in:
          type: integer
          description: Token expiration time in seconds
          example: 86400
        token_type:
          type: string
          description: Type of token (always "Bearer")
          example: Bearer
        scope:
          type: string
          description: Token scope and permissions
          example: read:profile write:farms read:companies
      required:
        - access_token
        - expires_in
        - token_type
    session:
      type: object
      properties:
        session_id:
          type: string
          description: Unique session identifier
          example: sess_1234567890abcdef
        user_id:
          type: string
          description: User ID associated with the session
          example: clh1234567890abcdef
        company_id:
          type: string
          description: Company ID associated with the session
          example: clh1234567890abcdef
        created_at:
          type: string
          format: date-time
          description: Session creation timestamp
          example: '2024-01-15T10:30:00Z'
        expires_at:
          type: string
          format: date-time
          description: Session expiration timestamp
          example: '2024-01-16T10:30:00Z'
        last_activity:
          type: string
          format: date-time
          description: Last activity timestamp
          example: '2024-01-15T10:30:00Z'
        ip_address:
          type: string
          description: IP address of the session
          example: 192.168.1.100
        user_agent:
          type: string
          description: User agent string
          example: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36
        is_active:
          type: boolean
          description: Whether the session is currently active
          example: true
      required:
        - session_id
        - user_id
        - created_at
        - expires_at
        - is_active
    auth_response:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the authentication operation was successful
          example: true
        message:
          type: string
          description: Human-readable message about the operation result
          example: Login successful
        data:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/user'
            tokens:
              $ref: '#/components/schemas/tokens'
            session:
              $ref: '#/components/schemas/session'
          required:
            - user
            - tokens
      required:
        - success
        - message
        - data
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT Bearer token authentication. Include your JWT token in the Authorization header.

        **Example:**
        ```
        Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        ```

        **Token Format:**
        - Header: `{"alg": "HS256", "typ": "JWT"}`
        - Payload: `{"sub": "user_id", "company_id": "company_id", "role": "user_role", "exp": 1640995200}`
        - Signature: HMAC SHA256

        **Token Expiration:** 24 hours
        **Refresh Token:** Available via `/auth/refresh` endpoint
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: |
        API Key for service-to-service authentication.
        Used for webhook endpoints and automated integrations.

        **Example:**
        ```
        X-API-Key: sk_live_1234567890abcdef
        ```
    OAuth2Auth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://cocoaflow.com/oauth/authorize
          tokenUrl: https://cocoaflow.com/oauth/token
          scopes:
            read:users: Read user information
            write:users: Create and update users
            read:farms: Read farm data
            write:farms: Create and update farms
            read:companies: Read company information
            write:companies: Create and update companies
            admin: Full administrative access
      description: |
        OAuth 2.0 authorization code flow for third-party integrations.
        Recommended for public integrations and mobile applications.
  parameters:
    PaginationLimit:
      name: limit
      in: query
      description: Number of items to return (max 100)
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
        example: 20
    PaginationOffset:
      name: offset
      in: query
      description: Number of items to skip for pagination
      required: false
      schema:
        type: integer
        minimum: 0
        default: 0
        example: 0
    CompanyId:
      name: company_id
      in: query
      description: Filter by company ID
      required: false
      schema:
        type: string
        format: cuid
        example: clh1234567890abcdef
    DateRangeStart:
      name: start_date
      in: query
      description: Start date for filtering (ISO 8601 format)
      required: false
      schema:
        type: string
        format: date
        example: '2024-01-01'
    DateRangeEnd:
      name: end_date
      in: query
      description: End date for filtering (ISO 8601 format)
      required: false
      schema:
        type: string
        format: date
        example: '2024-12-31'
  responses:
    UnauthorizedError:
      description: Authentication credentials were missing or invalid
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Unauthorized
              message:
                type: string
                example: Invalid or missing authentication token
              code:
                type: string
                example: AUTH_REQUIRED
    ForbiddenError:
      description: The request was understood but the server is refusing to authorize it
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Forbidden
              message:
                type: string
                example: Insufficient permissions to access this resource
              code:
                type: string
                example: INSUFFICIENT_PERMISSIONS
    ValidationError:
      description: The request was well-formed but contains invalid parameters
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Validation Error
              message:
                type: string
                example: Request validation failed
              details:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                      example: email
                    message:
                      type: string
                      example: Invalid email format
              code:
                type: string
                example: VALIDATION_ERROR
    RateLimitError:
      description: Too many requests, please try again later
      headers:
        X-RateLimit-Limit:
          description: The number of allowed requests in the current period
          schema:
            type: integer
        X-RateLimit-Remaining:
          description: The number of remaining requests in the current period
          schema:
            type: integer
        X-RateLimit-Reset:
          description: The number of seconds left in the current period
          schema:
            type: integer
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Rate Limit Exceeded
              message:
                type: string
                example: Too many requests, please try again later
              retry_after:
                type: integer
                example: 3600
              code:
                type: string
                example: RATE_LIMIT_EXCEEDED
    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Internal Server Error
              message:
                type: string
                example: An unexpected error occurred
              request_id:
                type: string
                example: req_1234567890abcdef
              code:
                type: string
                example: INTERNAL_ERROR
    UnauthorizedError-2:
      description: Authentication credentials were missing or invalid
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Unauthorized
              message:
                type: string
                example: Invalid or missing authentication token
              code:
                type: string
                example: AUTH_REQUIRED
              timestamp:
                type: string
                format: date-time
                example: '2024-01-15T10:30:00Z'
              request_id:
                type: string
                example: req_1234567890abcdef
    ServerError-2:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Internal Server Error
              message:
                type: string
                example: An unexpected error occurred
              request_id:
                type: string
                example: req_1234567890abcdef
              code:
                type: string
                example: INTERNAL_ERROR
              timestamp:
                type: string
                format: date-time
                example: '2024-01-15T10:30:00Z'
              support_reference:
                type: string
                example: SR-2024-001-123456
    ValidationError-2:
      description: The request was well-formed but contains invalid parameters
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Validation Error
              message:
                type: string
                example: Request validation failed
              details:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                      example: email
                    message:
                      type: string
                      example: Invalid email format
                    value:
                      type: string
                      example: invalid-email
              code:
                type: string
                example: VALIDATION_ERROR
              timestamp:
                type: string
                format: date-time
                example: '2024-01-15T10:30:00Z'
              request_id:
                type: string
                example: req_1234567890abcdef
    RateLimitError-2:
      description: Too many requests, please try again later
      headers:
        X-RateLimit-Limit:
          description: The number of allowed requests in the current period
          schema:
            type: integer
        X-RateLimit-Remaining:
          description: The number of remaining requests in the current period
          schema:
            type: integer
        X-RateLimit-Reset:
          description: The number of seconds left in the current period
          schema:
            type: integer
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Rate Limit Exceeded
              message:
                type: string
                example: Too many requests, please try again later
              retry_after:
                type: integer
                example: 3600
              code:
                type: string
                example: RATE_LIMIT_EXCEEDED
              timestamp:
                type: string
                format: date-time
                example: '2024-01-15T10:30:00Z'
              request_id:
                type: string
                example: req_1234567890abcdef
    ForbiddenError-2:
      description: The request was understood but the server is refusing to authorize it
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Forbidden
              message:
                type: string
                example: Insufficient permissions to access this resource
              code:
                type: string
                example: INSUFFICIENT_PERMISSIONS
              required_permissions:
                type: array
                items:
                  type: string
                example:
                  - write:farms
                  - admin:companies
              timestamp:
                type: string
                format: date-time
                example: '2024-01-15T10:30:00Z'
              request_id:
                type: string
                example: req_1234567890abcdef
x-tagGroups:
  - name: 🏢 Core Operations
    tags:
      - 🏢 Companies
      - 👥 Users
      - 👨‍🌾 Farmers
      - 🏡 Farms
  - name: 🌿 Certification & Compliance
    tags:
      - 🌿 Projects
      - 📈 Campaigns
      - 🔍 Inspection
  - name: 💼 Business Operations
    tags:
      - 🏪 Markets
      - 💰 Transactions
      - 🎓 Training
  - name: ⚙️ System Management
    tags:
      - 🔐 Authentication
      - 📊 Analytics
      - ⚙️ Administration
