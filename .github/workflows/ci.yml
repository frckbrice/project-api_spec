name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

# Add global permissions
permissions:
  contents: read
  security-events: write
  actions: read
  checks: write

jobs:
  validate:
    name: Validate OpenAPI Specification
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Validate OpenAPI spec
        run: npm run validate

      - name: Lint OpenAPI spec
        run: npm run lint

      - name: Build documentation
        run: npm run docs:build

      - name: Bundle specification
        run: npm run bundle

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: api-specification
          path: |
            dist/
            docs/
          retention-days: 30

      - name: Upload bundled spec
        uses: actions/upload-artifact@v4
        with:
          name: bundled-spec
          path: dist/cocoaflow-api.yaml
          retention-days: 30

  test:
    name: Test Generated Clients
    runs-on: ubuntu-latest
    needs: validate

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Download bundled specification
        uses: actions/download-artifact@v4
        with:
          name: bundled-spec
          path: dist/

      - name: Generate TypeScript client
        run: npm run generate:client

      - name: Generate Postman collection
        run: npm run generate:postman

      - name: Test TypeScript client
        run: |
          cd generated/typescript
          npm install
          npm test

  docker-test:
    name: Test Docker Container
    runs-on: ubuntu-latest
    needs: [validate, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          echo "Building Docker image..."
          docker build -t cocoaflow-api-docs .
          echo "‚úÖ Docker image built successfully"

      - name: Test Docker container
        run: |
          echo "Starting container..."
          docker run -d --name test-container -p 8080:8080 cocoaflow-api-docs
          echo "‚úÖ Container started successfully"

          echo "Waiting for container to be ready..."
          sleep 10

          echo "Container status:"
          docker ps -a

          echo "Container logs:"
          docker logs test-container

          echo "Testing container endpoint..."
          # Test the endpoint with retries
          for i in {1..10}; do
            echo "Attempt $i: Testing container endpoint..."
            if curl -f -s http://localhost:8080 > /dev/null; then
              echo "‚úÖ Container is responding successfully!"
              break
            else
              echo "Attempt $i failed, waiting 3 seconds..."
              sleep 3
              if [ $i -eq 10 ]; then
                echo "‚ùå Container failed to respond after 10 attempts"
                echo "Container logs:"
                docker logs test-container
                echo "Container status:"
                docker ps -a
                exit 1
              fi
            fi
          done

          echo "‚úÖ Container test completed successfully!"

      - name: Cleanup Docker resources
        if: always()
        run: |
          echo "Cleaning up Docker resources..."
          docker stop test-container 2>/dev/null || true
          docker rm test-container 2>/dev/null || true

  deploy:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [validate, test, docker-test]
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write # Needed for gh-pages deployment

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build documentation
        run: npm run docs:build

      - name: Download bundled specification
        uses: actions/download-artifact@v4
        with:
          name: bundled-spec
          path: dist/

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          vercel-args: "--prod"
        continue-on-error: true

      - name: Vercel deployment status
        if: always()
        run: |
          echo "üîç Checking Vercel deployment status..."
          if [ "${{ job.status }}" = "success" ]; then
            echo "‚úÖ Vercel deployment completed"
          else
            echo "‚ö†Ô∏è Vercel deployment had issues"
            echo "This is not critical - GitHub Pages deployment will still work"
          fi

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          destination_dir: .
          force_orphan: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write # Needed for uploading security results
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"
          category: "trivy"
