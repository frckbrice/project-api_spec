# create inspection data
post:
  tags:
    - üîç Inspection
  summary: Create inspection data
  description: |
    Create inspection data for each farm inspected.

    **Required Permissions:** `write:inspection`

    **Business Rules:**
    - Inspection data must be associated with a valid farm
    - GPS coordinates are required for compliance tracking
    - Inspection date must be within campaign period
    - Only authorized inspectors can create inspection data
  operationId: createInspectionData
  security:
    - BearerAuth: []
  requestBody:
    required: true
    content:
      application/json:
        schema:
          $ref: "../../components/schemas/inspection_data.yaml"
        examples:
          basic_inspection:
            summary: Basic inspection data
            description: Create inspection data with minimal information
            value:
              project_id: "clh1234567890abcdef"
              project_data:
                field_1: "value_1"
                field_2: "value_2"
              collected_by: "clh1234567890abcdef"
              collected_at: "2024-01-15T10:30:00Z"
          detailed_inspection:
            summary: Detailed inspection data
            description: Create inspection data with comprehensive details
            value:
              project_id: "clh1234567890abcdef"
              project_data:
                field_1: "value_1"
                field_2: "value_2"
                field_3: "value_3"
              collected_by: "clh1234567890abcdef"
              project_data_url: "https://storage.cocoaflow.com/projects/data1.json"
              collected_at: "2024-01-15T10:30:00Z"
  responses:
    "201":
      description: Inspection data created successfully
      headers:
        Location:
          description: URL of the created inspection data resource
          schema:
            type: string
            format: uri
      content:
        application/json:
          schema:
            $ref: "../../components/schemas/inspection_data.yaml"
          example:
            id: "clh1234567890abcdef"
            project_id: "clh1234567890abcdef"
            project_data:
              field_1: "value_1"
              field_2: "value_2"
            collected_by: "clh1234567890abcdef"
            project_data_url: "https://storage.cocoaflow.com/projects/data1.json"
            collected_at: "2024-01-15T10:30:00Z"
            created_at: "2024-01-15T10:30:00Z"
            updated_at: "2024-01-15T10:30:00Z"
    "400":
      $ref: "../../components/responses/ValidationError.yaml"
    "401":
      $ref: "../../components/responses/UnauthorizedError.yaml"
    "403":
      $ref: "../../components/responses/ForbiddenError.yaml"
    "404":
      description: Project not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Project Not Found"
              message:
                type: string
                example: "Project with the specified ID was not found"
              code:
                type: string
                example: "PROJECT_NOT_FOUND"
    "409":
      description: Inspection data already exists
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Inspection Data Already Exists"
              message:
                type: string
                example: "Inspection data already exists for this project and date"
              code:
                type: string
                example: "INSPECTION_DATA_ALREADY_EXISTS"
    "500":
      $ref: "../../components/responses/ServerError.yaml"

# retrieve all inspection data
get:
  tags:
    - üîç Inspection
  summary: Get all inspection data
  description: |
    Retrieve all inspection data with optional filtering.

    **Required Permissions:** `read:inspection`

    **Features:**
    - Filter by project ID
    - Filter by collector
    - Filter by date range
    - Pagination support
  operationId: listInspectionData
  security:
    - BearerAuth: []
  parameters:
    - $ref: "../../components/parameters/PaginationLimit.yaml"
    - $ref: "../../components/parameters/PaginationOffset.yaml"
    - $ref: "../../components/parameters/CompanyId.yaml"
    - $ref: "../../components/parameters/DateRangeStart.yaml"
    - $ref: "../../components/parameters/DateRangeEnd.yaml"
    - name: project_id
      in: query
      required: false
      description: Filter by project ID
      schema:
        type: string
        format: cuid
        example: "clh1234567890abcdef"
    - name: collected_by
      in: query
      required: false
      description: Filter by collector ID
      schema:
        type: string
        format: cuid
        example: "clh1234567890abcdef"
  responses:
    "200":
      description: List of inspection data retrieved successfully
      headers:
        X-Total-Count:
          description: Total number of inspection data matching the filter criteria
          schema:
            type: integer
        X-Page-Count:
          description: Total number of pages
          schema:
            type: integer
        Link:
          description: Pagination links (first, prev, next, last)
          schema:
            type: string
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: "../../components/schemas/inspection_data.yaml"
              pagination:
                type: object
                properties:
                  total:
                    type: integer
                    example: 150
                  limit:
                    type: integer
                    example: 20
                  offset:
                    type: integer
                    example: 0
                  has_more:
                    type: boolean
                    example: true
          example:
            data:
              - id: "clh1234567890abcdef"
                project_id: "clh1234567890abcdef"
                project_data:
                  field_1: "value_1"
                  field_2: "value_2"
                collected_by: "clh1234567890abcdef"
                project_data_url: "https://storage.cocoaflow.com/projects/data1.json"
                collected_at: "2024-01-15T10:30:00Z"
                created_at: "2024-01-15T10:30:00Z"
                updated_at: "2024-01-15T10:30:00Z"
              - id: "clh1234567890abcdeg"
                project_id: "clh1234567890abcdeg"
                project_data:
                  field_1: "value_3"
                  field_2: "value_4"
                collected_by: "clh1234567890abcdef"
                project_data_url: "https://storage.cocoaflow.com/projects/data2.json"
                collected_at: "2024-01-14T09:15:00Z"
                created_at: "2024-01-14T09:15:00Z"
                updated_at: "2024-01-14T09:15:00Z"
            pagination:
              total: 150
              limit: 20
              offset: 0
              has_more: true
    "400":
      $ref: "../../components/responses/ValidationError.yaml"
    "401":
      $ref: "../../components/responses/UnauthorizedError.yaml"
    "403":
      $ref: "../../components/responses/ForbiddenError.yaml"
    "429":
      $ref: "../../components/responses/RateLimitError.yaml"
    "500":
      $ref: "../../components/responses/ServerError.yaml"

# update inspection data
put:
  tags:
    - üîç Inspection
  summary: Update inspection data
  description: |
    Update existing inspection data.

    **Required Permissions:** `write:inspection`

    **Business Rules:**
    - Cannot update data older than 30 days
    - Only the original collector or admin can update
    - All changes are logged for audit purposes
  operationId: updateInspectionData
  security:
    - BearerAuth: []
  parameters:
    - name: inspection_id
      in: path
      required: true
      description: ID of the inspection data to update
      schema:
        type: string
        format: cuid
        example: "clh1234567890abcdef"
  requestBody:
    required: true
    content:
      application/json:
        schema:
          $ref: "../../components/schemas/inspection_data.yaml"
  responses:
    "200":
      description: Inspection data updated successfully
      content:
        application/json:
          schema:
            $ref: "../../components/schemas/inspection_data.yaml"
          example:
            id: "clh1234567890abcdef"
            project_id: "clh1234567890abcdef"
            project_data:
              field_1: "updated_value_1"
              field_2: "updated_value_2"
            collected_by: "clh1234567890abcdef"
            project_data_url: "https://storage.cocoaflow.com/projects/data1.json"
            collected_at: "2024-01-15T10:30:00Z"
            created_at: "2024-01-15T10:30:00Z"
            updated_at: "2024-01-15T11:30:00Z"
    "400":
      $ref: "../../components/responses/ValidationError.yaml"
    "401":
      $ref: "../../components/responses/UnauthorizedError.yaml"
    "403":
      $ref: "../../components/responses/ForbiddenError.yaml"
    "404":
      description: Inspection data not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Inspection Data Not Found"
              message:
                type: string
                example: "Inspection data with the specified ID was not found"
              code:
                type: string
                example: "INSPECTION_DATA_NOT_FOUND"
    "409":
      description: Update conflict
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Update Conflict"
              message:
                type: string
                example: "Cannot update inspection data in current state"
              code:
                type: string
                example: "UPDATE_CONFLICT"
    "500":
      $ref: "../../components/responses/ServerError.yaml"

# delete inspection data
delete:
  tags:
    - üîç Inspection
  summary: Delete inspection data
  description: |
    Delete inspection data from the system.

    **Required Permissions:** `write:inspection`

    **Business Rules:**
    - Cannot delete data older than 30 days
    - Cannot delete data that has been submitted for compliance
    - Only admin users can delete inspection data
    - Soft delete - marks as deleted but preserves data for audit trail
  operationId: deleteInspectionData
  security:
    - BearerAuth: []
  parameters:
    - name: inspection_id
      in: path
      required: true
      description: ID of the inspection data to delete
      schema:
        type: string
        format: cuid
        example: "clh1234567890abcdef"
  responses:
    "204":
      description: Inspection data deleted successfully
    "400":
      description: Cannot delete inspection data
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Cannot Delete Inspection Data"
              message:
                type: string
                example: "Cannot delete inspection data that has been submitted for compliance"
              code:
                type: string
                example: "INSPECTION_DATA_ALREADY_SUBMITTED"
    "401":
      $ref: "../../components/responses/UnauthorizedError.yaml"
    "403":
      $ref: "../../components/responses/ForbiddenError.yaml"
    "404":
      description: Inspection data not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Inspection Data Not Found"
              message:
                type: string
                example: "Inspection data with the specified ID was not found"
              code:
                type: string
                example: "INSPECTION_DATA_NOT_FOUND"
    "500":
      $ref: "../../components/responses/ServerError.yaml"
