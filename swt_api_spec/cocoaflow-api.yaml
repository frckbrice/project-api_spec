openapi: 3.1.0
info:
  version: 1.0.0
  title: CocoaFlow API
  summary: "Comprehensive Cocoa Industry Management Platform"
  description: |
    # 🌱 CocoaFlow API

    **The Complete Solution for Cocoa Industry Digital Transformation**

    ---

    ## 🎯 Overview

    CocoaFlow is a comprehensive API platform designed to revolutionize cocoa industry operations through digital transformation. Our API provides end-to-end solutions for farmer management, farm tracking, certification compliance, and supply chain optimization.

    ### 🌟 Why CocoaFlow?

    - **🌍 Industry-Focused**: Built specifically for cocoa industry challenges
    - **🔒 Enterprise-Grade**: Production-ready with enterprise security
    - **📊 Data-Driven**: Comprehensive analytics and reporting
    - **🌱 Sustainable**: Supports Rainforest Alliance certification
    - **🚀 Scalable**: Designed for growth and expansion

    ---

    ## 🚀 Key Features

    ### 👨‍🌾 **Farmer Management**
    Complete farmer profiles, contracts, and relationship tracking with digital onboarding and verification.

    ### 🏡 **Farm Operations**
    GPS coordinates, inspection data, and compliance monitoring with real-time tracking capabilities.

    ### 🌿 **Certification Support**
    Rainforest Alliance compliance tracking and audit trails with automated compliance checks.

    ### 📈 **Campaign Management**
    Seasonal campaign management and data collection periods with performance analytics.

    ### 🔄 **Supply Chain**
    Market management, transactions, and inventory tracking with end-to-end traceability.

    ### 🎓 **Training & Education**
    Session management and participant tracking with learning analytics and certification.

    ---

    ## 🛠️ Getting Started

    ### 1. **Authentication**
    The API uses JWT Bearer token authentication. Include your token in the Authorization header:
    ```
    Authorization: Bearer <your_token>
    ```

    ### 2. **API Requirements**
    - **Content-Type**: `application/json`
    - **Authentication**: JWT Bearer token required
    - **Rate Limiting**: Standard rate limiting applies to prevent abuse

    ### 3. **API Documentation**
    - Browse the interactive documentation
    - Test endpoints directly in the browser
    - View detailed request/response examples
    - Explore data models and schemas

    ---

    ## 🏗️ Architecture

    ### API Design
    - **RESTful Principles**: Resource-based URLs, standard HTTP methods
    - **OpenAPI 3.1.0**: Latest specification standard
    - **Modular Structure**: Reusable components and schemas

    ### Security
    - **JWT Authentication**: Secure token-based access
    - **Rate Limiting**: Request throttling for stability
    - **Input Validation**: Comprehensive request validation

    ### Data Models
    - **Standardized Schemas**: Consistent data structures
    - **Relationship Mapping**: Clear resource relationships
    - **Validation Rules**: Built-in data validation

    ### Documentation
    - **Interactive UI**: Try endpoints in browser
    - **Code Examples**: Request/response samples
    - **Schema Browser**: Explore data models

    ---

    ## 🌐 Environment

    | Environment | URL | Status |
    |-------------|-----|--------|
    | **Documentation** | [https://project-apispec.vercel.app](https://project-apispec.vercel.app) | ✅ Live |
    | **Local Development** | `http://localhost:8080` | ✅ Available |

    ---

    ## 📚 SDKs & Libraries

    | SDK | Language | Status | Documentation |
    |-----|----------|--------|---------------|
    | **JavaScript/TypeScript** | Node.js, Browser | 🚧 Design Phase | [View Design](https://github.com/frckbrice/project-api_spec/tree/main/sdks/javascript) |
    | **Python** | Python 3.8+ | 🚧 Design Phase | [View Design](https://github.com/frckbrice/project-api_spec/tree/main/sdks/python) |
    | **Postman Collection** | API Testing | ✅ Ready | [Download](https://github.com/frckbrice/project-api_spec/tree/main/postman) |

    ---

    ## 📖 Documentation & Resources

    - **API Documentation**: [https://project-apispec.vercel.app](https://project-apispec.vercel.app)
    - **GitHub Repository**: [https://github.com/frckbrice/project-api_spec](https://github.com/frckbrice/project-api_spec)
    - **OpenAPI Specification**: [Download YAML](https://project-apispec.vercel.app/cocoaflow-api.yaml)

    ---

    Built with OpenAPI 3.1.0 and Redocly.

  contact:
    email: support@cocoaflow.com
    url: "https://cocoaflow.com/contact"
    name: "CocoaFlow Support Team"
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
  x-logo:
    url: "https://images.unsplash.com/photo-1667900598245-6620cea1c04c?w=900&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Nnx8Y29jb2F8ZW58MHx8MHx8fDA%3D"
    altText: "CocoaFlow - Cocoa Industry Management"
    backgroundColor: "#FFFFFF"

externalDocs:
  description: "📚 GitHub Repository & Documentation"
  url: "https://github.com/frckbrice/project-api_spec"

tags:
  - name: "🔐 Authentication"
    description: "Authentication and authorization endpoints"
  - name: "🏡 Farms"
    description: "Farm management operations"
  - name: "📈 Campaigns"
    description: "Campaign and stock management"
  - name: "🏢 Companies"
    description: "Company management and subscriptions"
  - name: "💰 Transactions"
    description: "Transaction processing and management"
  - name: "💰 Receipts"
    description: "Receipt generation and management"
  - name: "🔍 Inspection"
    description: "Inspection data management"
  - name: "🎓 Training"
    description: "Training sessions and management"
  - name: "User"
    description: "User account management"
  - name: "Price"
    description: "Pricing and subscription plans"
  - name: "Farm_coodinates"
    description: "Farm location and mapping data"
  - name: "Subscription"
    description: "Subscription management"
  - name: "Company"
    description: "Company profile management"
  - name: "Receipt"
    description: "Receipt operations"
  - name: "Inspection_data"
    description: "Detailed inspection records"
  - name: "🌿 Projects"
    description: "Project management and certification tracking"
  - name: "🏪 Markets"
    description: "Market session management and trading"
  - name: "🌿 Audits"
    description: "Project and market audit management"

x-tagGroups:
  - name: 🏢 Core Operations
    tags:
      - 🏢 Companies
      - 👥 Users
      - 👨‍🌾 Farmers
      - 🏡 Farms
      - 🌿 Projects
      - 📈 Campaigns
      - 🔍 Inspection
      - 📊 Analytics
      - 🔐 Authentication
      - 🏪 Markets
      - 💰 Transactions
      - 🎓 Training
  - name: 🌿 Certification & Compliance
    tags:
      - 🌿 Audits
      - 📈 Campaigns
      - 🔍 Inspection
  - name: 💼 Business Operations
    tags:
      - 🏪 Markets
      - 💰 Transactions
      - 🎓 Training
  - name: ⚙️ System Management
    tags:
      - 🔐 Authentication
      - 📊 Analytics
      - ⚙️ Administration

servers:
  - url: http://localhost:8080
    description: 💻 Local Development Environment
  - url: https://project-apispec.vercel.app
    description: 📚 Documentation & API Specification

paths:
  "/auth/login": # authentication
    $ref: paths/auth/auth.yaml
  "/auth/refresh":
    $ref: paths/auth/refresh.yaml
  "/auth/logout":
    $ref: paths/auth/logout.yaml
  "/auth/me":
    get:
      $ref: paths/auth/auth.yaml#/get
  "/users": # user
    $ref: paths/user/user.yaml
  "/users/{id}":
    $ref: paths/user/user_{id}.yaml
  "/companies": # company
    $ref: paths/companies/company.yaml
  "/companies/{id}":
    $ref: paths/companies/company_{id}.yaml
  "/campaign": # campaign
    $ref: paths/campaign.yaml
  "/price_plan": # price plan
    $ref: paths/price/price.yaml
  "/price_plan/{id}":
    $ref: paths/price/price_{id}.yaml
  "/projects": # project
    $ref: paths/project/project.yaml
  "/projects/{id}":
    $ref: paths/project/project_{id}.yaml
  "/farms": # farm
    $ref: paths/farm/farm.yaml
  "/farms/{id}":
    $ref: paths/farm/farm_{id}.yaml
  "/audits": # unified audits endpoint
    $ref: paths/audits.yaml
  "/audits/{audit_id}": # unified audits endpoint
    $ref: paths/audits.yaml
  "/receipts": # receipts
    $ref: paths/receipt/receipt.yaml
  "/receipts/{id}":
    $ref: paths/receipt/receipt_{id}.yaml
  "/farm_coordinates": #farm_coordinate
    $ref: paths/farm_coodinates/farm_coordinate.yaml
  "/farm_coordinate/{farmer_id}":
    $ref: paths/farm_coodinates/farm_coordinate_{farmer_id}.yaml
  "/markets": #market
    $ref: paths/market/market.yaml
  "/markets/{id}":
    $ref: paths/market/market_{id}.yaml
  "/markets/{company_id}/company":
    $ref: paths/market/market_{company_id}.yaml
  "/inspection_data": # inspection_data
    $ref: "paths/inspection_data/inspection_data.yaml"
  "/inspection_data/{project_id}":
    $ref: "paths/inspection_data/inspection_data_{project_id}.yaml"

  "/subscriptions": # subcription
    $ref: "paths/subscription/subscription.yaml"
  "/subscriptions/{id}":
    $ref: "paths/subscription/subscription_{id}.yaml"
  "/subscriptions/{company_id}/company":
    $ref: paths/subscription/subscription_{company_id }_company.yaml
  "/trainings": # training
    $ref: paths/training/training.yaml
  "/trainings/{id}":
    $ref: paths/training/training_{id}.yaml
  "/transaction": # transaction
    $ref: paths/transaction.yaml
  "/campaign_stocks": #campaign_stock
    $ref: paths/campaign_stock/campaign_stock.yaml
  "/campaign_stocks/{campaign_id}":
    $ref: paths/campaign_stock/campaign_stock_{campaign_id}.yaml
  "/requirements": #requirement
    $ref: paths/requirement/requirement.yaml
  "/requirement/{id}":
    $ref: paths/requirement/requirement_{id} .yaml
  "/requirement/price_plan/{plan_id}":
    $ref: paths/requirement/requirement_price_plan_{plan_id}.yaml
  "/collector_agents": # collector_agent
    $ref: "paths/collector_agent/collector_agent.yaml"
  "/collector_agents/{id}":
    $ref: paths/collector_agent/collector_agent_{id}.yaml
  "/training_session": #participants
    $ref: paths/training_session.yaml
  "/price_plan_requirements":
    $ref: paths/price_plan_requirement.yaml
components:
  schemas:
    AuthResponse:
      $ref: components/schemas/auth_response.yaml
    Tokens:
      $ref: components/schemas/tokens.yaml
    Session:
      $ref: components/schemas/session.yaml
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT Bearer token authentication. All authenticated endpoints require a valid JWT token.

        **Token Format**: `Authorization: Bearer <token>`

        **Token Details:**
        - Header: `{"alg": "HS256", "typ": "JWT"}`
        - Payload: `{"sub": "user_id", "company_id": "company_id", "role": "user_role", "exp": 1640995200}`
        - Signature: HMAC SHA256

        **Token Management:**
        - Expiration: 24 hours
        - Refresh: Available via `/auth/refresh` endpoint

        **Rate Limiting:**
        - Rate limits are enforced per token
        - Limits vary by endpoint and user role
        - Rate limit headers in all responses:
          - `X-RateLimit-Limit`: Total requests allowed
          - `X-RateLimit-Remaining`: Requests remaining
          - `X-RateLimit-Reset`: Seconds until limit resets
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: |
        API Key for service-to-service authentication.
        Used for webhook endpoints and automated integrations.

        **Example:**
        ```
        X-API-Key: sk_live_1234567890abcdef
        ```
    OAuth2Auth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://cocoaflow.com/oauth/authorize
          tokenUrl: https://cocoaflow.com/oauth/token
          scopes:
            read:users: Read user information
            write:users: Create and update users
            read:farms: Read farm data
            write:farms: Create and update farms
            read:companies: Read company information
            write:companies: Create and update companies
            admin: Full administrative access
      description: |
        OAuth 2.0 authorization code flow for third-party integrations.
        Recommended for public integrations and mobile applications.

  parameters:
    PaginationLimit:
      name: limit
      in: query
      description: Number of items to return (max 100)
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
        example: 20
    PaginationOffset:
      name: offset
      in: query
      description: Number of items to skip for pagination
      required: false
      schema:
        type: integer
        minimum: 0
        default: 0
        example: 0
    CompanyId:
      name: company_id
      in: query
      description: Filter by company ID
      required: false
      schema:
        type: string
        format: cuid
        example: "clh1234567890abcdef"
    DateRangeStart:
      name: start_date
      in: query
      description: Start date for filtering (ISO 8601 format)
      required: false
      schema:
        type: string
        format: date
        example: "2024-01-01"
    DateRangeEnd:
      name: end_date
      in: query
      description: End date for filtering (ISO 8601 format)
      required: false
      schema:
        type: string
        format: date
        example: "2024-12-31"

  responses:
    UnauthorizedError:
      description: Authentication credentials were missing or invalid
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Unauthorized"
              message:
                type: string
                example: "Invalid or missing authentication token"
              code:
                type: string
                example: "AUTH_REQUIRED"
    ForbiddenError:
      description: The request was understood but the server is refusing to authorize it
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Forbidden"
              message:
                type: string
                example: "Insufficient permissions to access this resource"
              code:
                type: string
                example: "INSUFFICIENT_PERMISSIONS"
    ValidationError:
      description: The request was well-formed but contains invalid parameters
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Validation Error"
              message:
                type: string
                example: "Request validation failed"
              details:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                      example: "email"
                    message:
                      type: string
                      example: "Invalid email format"
              code:
                type: string
                example: "VALIDATION_ERROR"
    RateLimitError:
      description: Too many requests, please try again later
      headers:
        X-RateLimit-Limit:
          description: The number of allowed requests in the current period
          schema:
            type: integer
        X-RateLimit-Remaining:
          description: The number of remaining requests in the current period
          schema:
            type: integer
        X-RateLimit-Reset:
          description: The number of seconds left in the current period
          schema:
            type: integer
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Rate Limit Exceeded"
              message:
                type: string
                example: "Too many requests, please try again later"
              retry_after:
                type: integer
                example: 3600
              code:
                type: string
                example: "RATE_LIMIT_EXCEEDED"
    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Internal Server Error"
              message:
                type: string
                example: "An unexpected error occurred"
              request_id:
                type: string
                example: "req_1234567890abcdef"
              code:
                type: string
                example: "INTERNAL_ERROR"

security:
  - BearerAuth: []

webhooks:
  userInfo:
    post:
      summary: New user webhook
      description: "Information about a new subscription entring in the system."
      operationId: susbscriptionInfo
      tags:
        - susbscription
      requestBody:
        content:
          application/json:
            schema:
              $ref: components/schemas/subscription.yaml
      responses:
        "200":
          description: "Successfully retrieved information about a new subscription."
      security:
        - BearerAuth: []
