openapi: 3.1.0
info:
  version: 1.0.0
  title: senwisetool.com
  termsOfService: "https://senwisetool.com/terms/"
  contact:
    email: senmima-support@senima.com
    url: "http://senwisetool.com/contact"
    name: senmima

  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
  x-logo:
    url: "https://zfmlvubvatipllsqsehh.supabase.co/storage/v1/object/sign/my_blog_stuffs/senwiseTool.png?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJteV9ibG9nX3N0dWZmcy9zZW53aXNlVG9vbC5wbmciLCJpYXQiOjE3MjQzNDk5NDgsImV4cCI6MTg4MjAyOTk0OH0.wx1eEMRztMVBPWk1LVWMISbUC2VJmUFEirubfzcqGGc&t=2024-08-22T18%3A05%3A49.101Z"
  description: >
    THE API SPECIFICATION FOR **SENWISETOOL** PROJECT.


    # description

    This API definition is intended to to be a good starting point for developers and consumers of the **sendwisetool** project based on REST-API specifications. It represents a contract between the two teams involved, front-end and backend of the project.

    I allows every stakeholder (Human and computer) to discover and understand the capabilities of the service without access to source
    code, documentation, or through network traffic inspection. 
    When properly defined, any team member can understand and interact with the remote service with a minimal amount of implementation logic.
externalDocs:
  description: "corresponding repository for the project"
  url: "https://github.com/frckbrice/senwisetool-project-backend"
tags:
  - name: Project
    description: The project represents any operation made by the company to make sur the requirements specified in the Rainforest Alliance specification are respected either by the company or by the farmers. And also the process of collecting data from the farms.
  - name: User
    description: the users on the subscribed companies.
  - name: Campaign
    description: The Campaign is the main element that wraps all the operations made by companies during the defined periods. For example a campain can be 2023-2024 and wraps everythings done by the company during this campaign.
  - name: Inspection_data
    description: The Inspection_data represents data collected during the inspection organised by the company on the farms.
  - name: Farms
    description: the farm owned by the farmers that are part of the company registered to Rainforest alliance certification
  - name: Market
    description: Martket represents the meeting between the company and the farmers to buy and sell their crops.
  - name: Receipt
    description: Receipt represents all the information involved in the transaction made by between the farmer and the company.
  - name: Transaction
    description: Transaction represents all the operations made by the companies after the market has taken place. The company transfers its products purchassed from the farmers to another buyer company.
  - name: Subscription
    description: Subscription represents the registration of the company to the system based on a specific plan.
  - name: Price
    description: Price is the product offer price.
  - name: Offer
    description: The Offer represents the offer of the product that the company owning the system is selling.
  - name: Requirement
    description: Requirement represents the main reason behind the offer plan. The company subscribe to an offer plan.
  - name: Training
    description: Training is the one of the operation organised by the company that concerns the farmers to follow the specifications of the Rainforest Alliance norms.
  - name: Campaign_stock
    description: Campaign_stock represents the rest of the non sold product by the certified company during one Campaign.
  - name: Company
    description: Company is the moral person that register to the system and is  (potential) certified Rainforest alliance.
  - name: Collector_agent
    description: Collector_agent represents the person appointed to the collection of the data on ground zero from farmers and farms.
  - name: Farm_coodinates
    description: Coordinate represents information about the farms dimensions.
  - name: Participants
    description: participants represents the persons who took part on a training session.
  - name: Project_audit
    description: Project_audit represents the the storage of the information about the person in the company who was in charge of conducting the project.
  - name: Market_audit
    description: represents the the storage of the information about the person in the company who was in charge of conducting the Market..
  - name: Admin
    description: Administration of the system.
  - name: Price_plan_requirements
    description: The Price_plan_requirements represents the resulting table between the price_plan and requirement. It define the requirements corresponding to a particular price plan.
x-tagGroups:
  - name: General
    tags:
      - Company
      - User
      - Farm
      - Transaction
      - Campaign
      - Market
      - Receipt
      - Project
      - Inspection_data
      - Subscription
      - Requirement
      - Training
      - Campaign_stock
      - Collector_agent
      - Farm_coodinates
      - Project_audit
      - Price
      - Offer
      - Market_audit
      - Plan_requirement
  - name: Administration
    tags:
      - Admin
servers:
  - url: https://{tenant}/api
    variables:
      tenant:
        default: www
        description: Your tenant id
  - url: https://senw***seTool.com/api
paths:
  "/users": # user
    $ref: paths/user/user.yaml
  "/users/{id}":
    $ref: paths/user/user_{id}.yaml
  "/companies": # company
    $ref: paths/companies/company.yaml
  "/companies/{id}":
    $ref: paths/companies/company_{id}.yaml
  "/campaign": # campaign
    $ref: paths/campaign.yaml
  "/price_plan": # price plan
    $ref: paths/price/price.yaml
  "/price_plan/{id}":
    $ref: paths/price/price_{id}.yaml
  "/projects": # project
    $ref: paths/project/project.yaml
  "/projects/{id}":
    $ref: paths/project/project_{id}.yaml
  "/farms": # farm
    $ref: paths/farm/farm.yaml
  "/farms/{id}":
    $ref: paths/farm/farm_{id}.yaml
  "/project_audits": # project-audits
    $ref: paths/project_audit.yaml
  "/receipts": # receipts
    $ref: paths/receipt/receipt.yaml
  "/receipts/{id}":
    $ref: paths/receipt/receipt_{id}.yaml
  "/farm_coordinates": #farm_coordinate
    $ref: paths/farm_coodinates/farm_coordinate.yaml
  "/farm_coordinate/{farmer_id}":
    $ref: paths/farm_coodinates/farm_coordinate_{farmer_id}.yaml
  "/markets": #market
    $ref: paths/market/market.yaml
  "/markets/{id}":
    $ref: paths/market/market_{id}.yaml
  "/markets/{company_id}/company":
    $ref: paths/market/market_{company_id}.yaml
  "/market_audits": # market_audit
    $ref: "paths/market_audit.yaml"
  "/inspection_data": # inspection_data
    $ref: "paths/inspection_data/inspection_data.yaml"
  "/inspection_data/{project_id}":
    $ref: "paths/inspection_data/inspection_data_{project_id}.yaml"
  "/subscriptions": # subcription
    $ref: "paths/subscription/subscription.yaml"
  "/subscriptions/{id}":
    $ref: "paths/subscription/subscription_{id}.yaml"
  "/subscriptions/{id}/company/{company_id}":
    $ref: paths/subscription/subscription_{id} _company_{company_id}.yaml
  "/trainings": # training
    $ref: paths/training/training.yaml
  "/trainings/{id}":
    $ref: paths/training/training_{id}.yaml
  "/transaction": # transaction
    $ref: paths/transaction.yaml
  "/campaign_stocks": #campaign_stock
    $ref: paths/campaign_stock/campaign_stock.yaml
  "/campaign_stocks/{campaign_id}":
    $ref: paths/campaign_stock/campaign_stock_{campaign_id}.yaml
  "/requirements": #requirement
    $ref: paths/requirement/requirement.yaml
  "/requirement/{id}":
    $ref: paths/requirement/requirement_{id}.yaml
  "/collector_agents": # collector_agent
    $ref: "paths/collector_agent/collector_agent.yaml"
  "/collector_agents/{id}":
    $ref: paths/collector_agent/collector_agent_{id}.yaml
  "/participants": #participants
    $ref: paths/participant.yaml
  "/price_plan_requirements":
    $ref: paths/price_plan_requirement.yaml
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - BearerAuth: []
webhooks:
  userInfo:
    post:
      summary: New user webhook
      description: "Information about a new subscription entring in the system."
      operationId: susbscriptionInfo
      tags:
        - susbscription
      requestBody:
        content:
          application/json:
            schema:
              $ref: components/schemas/subscription.yaml
      responses:
        "200":
          description: "Successfully retrieved information about a new subscription."
      security:
        - BearerAuth: []
