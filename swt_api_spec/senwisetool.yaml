openapi: 3.1.0
info:
  version: 1.0.0
  title: senwisetool.com
  termsOfService: "https://senwisetool.com/terms/"
  contact:
    email: senmima-support@senima.com
    url: "http://senwisetool.com/contact"
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
  x-logo:
    url: "https://redocly.github.io/openapi-template/logo.png"
  description: >
    This is an **example** API to demonstrate features of the OpenAPI specification.

    # description

    This API definition is intended to to be a good starting point for developers and consumers of the OpenAPI Specification based on REST-API. It implements the senwisetool project contract between the two teams, front-end and backend.

    I allows humans and computers to discover and understand the capabilities of the service without access to source
    code, documentation, or through network traffic inspection. When properly
    defined via OpenAPI, a consumer can understand and interact with the remote service with a minimal amount of implementation logic. Similar to what interfaces have done for lower-level programming.
externalDocs:
  description: "corresponding repository for the project"
  url: "https://github.com/frckbrice/senwisetool-project-backend"
tags:
  - name: Project
    description: the projects create by the subscribed companies to define their Rainforest alliance certification specifications fron inspections to the farmers' farms.
  - name: User
    description: the users on the subscribed companies.
  - name: Campaign
    description: The Campaign is the main element that wraps all the operations made by companies during the defined periods.
  - name: Inspection_data
    description: The Inspection_data represents data collected during the inspection organised by the company on the farms.
  - name: Farms
    description: the farm owned by the farmers that are part of the company registered to Rainforest alliance certification
  - name: Market
    description: Martket represents the meeting between the company and the farmers to buy and sell their crops.
  - name: Receipt
    description: Receipt represents the document generated by the company after the buying the crops from the farmer.
  - name: Transaction
    description: Transaction represents all the operations made by the companies after the market has taken place and their are about to transfer their products to another buyer company.
  - name: Subscription
    description: Subscription represents the registration of the company to the system according to certain offer.
  - name: Price
    description: Price is the product offer price.
  - name: Offer
    description: The Offer represents the offer of the product that the company owning the system is selling.
  - name: Chapter
    description: Chapter represents the main reason behind the offer.
  - name: Training
    description: Training is the one of the operation organised by the company.
  - name: Camoaign_stock
    description: Campaign_stock represents the rest of the non sold product by the certified company during one Campaign.
  - name: Company
    description: Company is the moral person that register to the system and is  (potential) certified Rainforest alliance.
  - name: Collector_agent
    description: Collector_agent represents the person appointed to the collection of the data on ground zero from farmers and farms.
  - name: Coordinate
    description: Coordinate represents the dimensions data about the farms.
  - name: Participants
    description: participants represents the persons who took part on a training session.
  - name: Project_audit
    description: Project_audit represents the the storage of the information about the person in the company who was in charge of conducting the project.
  - name: Market_audit
    description: represents the the storage of the information about the person in the company who was in charge of conducting the Market..
  - name: Admin
    description: Administration of the system.
x-tagGroups:
  - name: General
    tags:
      - Company
      - User
      - Farm
      - Transaction
      - Campaign
      - Market
      - Receipt
      - Project
      - Inspection_data
      - Subscription
      - Chapter
      - Training
      - Campaign_stock
      - Collector_agent
      - Coordinate
      - Project_audit
      - Price
      - Offer
      - Market_audit
  - name: Administration
    tags:
      - Admin
servers:
  - url: https://{tenant}/api
    variables:
      tenant:
        default: www
        description: Your tenant id
  - url: https://localhost:3000/api
paths:
  "/users":
    $ref: paths/user/user.yaml
  "/users/{id}":
    $ref: paths/user/user_{id}.yaml
  "/companies":
    $ref: paths/companies/company.yaml
  "/companies/{id}":
    $ref: paths/companies/company_{id}.yaml
  "/campaign": # campaign
    $ref: paths/campaign.yaml
  "/price_plan": # price plan
    $ref: paths/price/price.yaml
  "/price_plan/{id}":
    $ref: paths/price/price_{id}.yaml
  "/projects": # project
    $ref: paths/project/project.yaml
  "/projects/{id}":
    $ref: paths/project/project_{id}.yaml
  "/farms": # farm
    $ref: paths/farm/farm.yaml
  "/farms/{id}":
    $ref: paths/farm/farm_{id}.yaml
  "/project_audits":
    $ref: paths/project_audit.yaml
  "/receipts": # receipts
    $ref: paths/receipt/receipt.yaml
  "/receipts/{id}":
    $ref: paths/receipt/receipt_{id}.yaml
  "/farm_coordinate": #farm_coordinate
    $ref: paths/farm_coodinates/farm_coordinate.yaml
  "/farm_coordinate/{farmer_id}":
    $ref: paths/farm_coodinates/farm_coordinate_{farmer_id}.yaml
  "/market": #market
    $ref: paths/market/market.yaml
  "/market/{id}":
    $ref: paths/market/market_{id}.yaml
  "/market/{company_id}/company":
    $ref: paths/market/market_{company_id}.yaml
  "/market_audit": # market_audit
    $ref: "paths/market_audit.yaml"
  "/inspection_data": # inspection_data
    $ref: "paths/inspection_data/inspection_data.yaml"
  "/inspection_data/{project_id}":
    $ref: "paths/inspection_data/inspection_data_{project_id}.yaml"
  "/subscription": # subcription
    $ref: "paths/subscription/subscription.yaml"
  "/subscription/{id}":
    $ref: "paths/subscription/subscription_{id}.yaml"
  "/subscription/{id}/company/{company_id}":
    $ref: paths/subscription/subscription_{id} _company_{company_id}.yaml
  "/trainings": # training
    $ref: paths/training/training.yaml
  "/training/{id}":
    $ref: paths/training/training_{id}.yaml
  "/transaction": # transaction
    $ref: paths/transaction.yaml
  "/campaign_stock": #campaign_stock
    $ref: paths/campaign_stock/campaign_stock.yaml
  "/campaign_stock/{campaign_id}":
    $ref: paths/campaign_stock/campaign_stock_{campaign_id}.yaml
  "/requirement": #requirement
    $ref: paths/requirement/requirement.yaml
  "/requirement/{id}":
    $ref: paths/requirement/requirement_{id}.yaml
  "/collector_agent": # collector_agent
    $ref: "paths/collector_agent/collector_agent.yaml"
  "/collector_agent/{id}":
    $ref: "paths/collector_agent/collector_agent_{id}.yaml"
  "/participants": #participants
    $ref: paths/participant.yaml
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - BearerAuth: []
webhooks:
  userInfo:
    post:
      summary: New user webhook
      description: "Information about a new subscription entring in the system."
      operationId: susbscriptionInfo
      tags:
        - susbscription
      requestBody:
        content:
          application/json:
            schema:
              $ref: components/schemas/subscription.yaml
      responses:
        "200":
          description: "Successfully retrieved information about a new subscription."
      security:
        - BearerAuth: []
