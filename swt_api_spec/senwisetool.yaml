openapi: 3.1.0
info:
  version: 1.0.0
  title: SenWiseTool API
  description: |
    # SenWiseTool - Cocoa Industry Management API
    
    ## Overview
    SenWiseTool is a comprehensive API for managing cocoa industry operations, including farmer management, farm tracking, certification compliance, and supply chain optimization.
    
    ## Key Features
    - **Farmer Management**: Complete farmer profiles, contracts, and relationship tracking
    - **Farm Operations**: GPS coordinates, inspection data, and compliance monitoring
    - **Certification Support**: Rainforest Alliance compliance tracking and audit trails
    - **Supply Chain**: Market management, transactions, and inventory tracking
    - **Training & Education**: Session management and participant tracking
    
    ## Getting Started
    1. Obtain API credentials from your administrator
    2. Use JWT Bearer token authentication
    3. All requests should include `Content-Type: application/json`
    4. Rate limiting: 1000 requests per hour per API key
    
    ## Environment
    - **Documentation**: [https://project-apispec.vercel.app](https://project-apispec.vercel.app)
    - **Local Development**: `http://localhost:8080`
    
    ## Support
    - **Documentation**: [https://project-apispec.vercel.app](https://project-apispec.vercel.app)
    - **Support Email**: bricefrkc@gmail.com
  
    
    ## SDKs & Libraries
    - [JavaScript/TypeScript SDK](https://github.com/senwisetool/js-sdk)
    - [Python SDK](https://github.com/senwisetool/python-sdk)
    - [Postman Collection](https://github.com/senwisetool/postman-collection)
    
  termsOfService: "https://senwisetool.com/terms"
  contact:
    email: support@senwisetool.com
    url: "https://senwisetool.com/contact"
    name: SenWiseTool Support Team
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
  x-logo:
    url: "../docs/senwiseTool.png"


externalDocs:
  description: "GitHub Repository"
  url: "https://github.com/senwisetool/api-specification"

tags:
  - name: Authentication
    description: User authentication and authorization endpoints
    externalDocs:
      description: "Authentication Guide"
      url: "https://docs.senwisetool.com/authentication"
  - name: Companies
    description: Company management operations for cocoa industry organizations
  - name: Users
    description: User management for system administrators and company employees
  - name: Farmers
    description: Farmer profile and relationship management
  - name: Farms
    description: Farm registration, GPS tracking, and compliance monitoring
  - name: Projects
    description: Rainforest Alliance certification projects and compliance tracking
  - name: Campaigns
    description: Seasonal campaign management and data collection periods
  - name: Markets
    description: Market sessions for cocoa trading between companies and farmers
  - name: Transactions
    description: Financial transactions and payment processing
  - name: Training
    description: Farmer training sessions and educational content management
  - name: Inspection
    description: Farm inspection data collection and compliance verification
  - name: Subscriptions
    description: Company subscription and pricing plan management
  - name: Analytics
    description: Data analytics and reporting endpoints
  - name: Administration
    description: System administration and configuration

x-tagGroups:
  - name: Core Operations
    tags:
      - Companies
      - Users
      - Farmers
      - Farms
  - name: Certification & Compliance
    tags:
      - Projects
      - Campaigns
      - Inspection
  - name: Business Operations
    tags:
      - Markets
      - Transactions
      - Training
  - name: System Management
    tags:
      - Authentication
      - Subscriptions
      - Administration
      - Analytics

servers:
  - url: https://project-apispec.vercel.app
    description: Documentation and API specification
  - url: http://localhost:8080
    description: Local development environment

paths:
  "/users": # user
    $ref: paths/user/user.yaml
  "/users/{id}":
    $ref: paths/user/user_{id}.yaml
  "/companies": # company
    $ref: paths/companies/company.yaml
  "/companies/{id}":
    $ref: paths/companies/company_{id}.yaml
  "/campaign": # campaign
    $ref: paths/campaign.yaml
  "/price_plan": # price plan
    $ref: paths/price/price.yaml
  "/price_plan/{id}":
    $ref: paths/price/price_{id}.yaml
  "/projects": # project
    $ref: paths/project/project.yaml
  "/projects/{id}":
    $ref: paths/project/project_{id}.yaml
  "/farms": # farm
    $ref: paths/farm/farm.yaml
  "/farms/{id}":
    $ref: paths/farm/farm_{id}.yaml
  "/project_audits": # project-audits
    $ref: paths/project_audit.yaml
  "/receipts": # receipts
    $ref: paths/receipt/receipt.yaml
  "/receipts/{id}":
    $ref: paths/receipt/receipt_{id}.yaml
  "/farm_coordinates": #farm_coordinate
    $ref: paths/farm_coodinates/farm_coordinate.yaml
  "/farm_coordinate/{farmer_id}":
    $ref: paths/farm_coodinates/farm_coordinate_{farmer_id}.yaml
  "/markets": #market
    $ref: paths/market/market.yaml
  "/markets/{id}":
    $ref: paths/market/market_{id}.yaml
  "/markets/{company_id}/company":
    $ref: paths/market/market_{company_id}.yaml
  "/market_audits": # market_audit
    $ref: "paths/market_audit.yaml"
  "/inspection_data": # inspection_data
    $ref: "paths/inspection_data/inspection_data.yaml"
  "/inspection_data/{project_id}":
    $ref: "paths/inspection_data/inspection_data_{project_id}.yaml"

  "/subscriptions": # subcription
    $ref: "paths/subscription/subscription.yaml"
  "/subscriptions/{id}":
    $ref: "paths/subscription/subscription_{id}.yaml"
  "/subscriptions/{company_id}/company":
    $ref: paths/subscription/subscription_{company_id }_company.yaml
  "/trainings": # training
    $ref: paths/training/training.yaml
  "/trainings/{id}":
    $ref: paths/training/training_{id}.yaml
  "/transaction": # transaction
    $ref: paths/transaction.yaml
  "/campaign_stocks": #campaign_stock
    $ref: paths/campaign_stock/campaign_stock.yaml
  "/campaign_stocks/{campaign_id}":
    $ref: paths/campaign_stock/campaign_stock_{campaign_id}.yaml
  "/requirements": #requirement
    $ref: paths/requirement/requirement.yaml
  "/requirement/{id}":
    $ref: paths/requirement/requirement_{id} .yaml
  "/requirement/price_plan/{plan_id}":
    $ref: paths/requirement/requirement_price_plan_{plan_id}.yaml
  "/collector_agents": # collector_agent
    $ref: "paths/collector_agent/collector_agent.yaml"
  "/collector_agents/{id}":
    $ref: paths/collector_agent/collector_agent_{id}.yaml
  "/training_session": #participants
    $ref: paths/training_session.yaml
  "/price_plan_requirements":
    $ref: paths/price_plan_requirement.yaml
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT Bearer token authentication. Include your JWT token in the Authorization header.
        
        **Example:**
        ```
        Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        ```
        
        **Token Format:**
        - Header: `{"alg": "HS256", "typ": "JWT"}`
        - Payload: `{"sub": "user_id", "company_id": "company_id", "role": "user_role", "exp": 1640995200}`
        - Signature: HMAC SHA256
        
        **Token Expiration:** 24 hours
        **Refresh Token:** Available via `/auth/refresh` endpoint
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: |
        API Key for service-to-service authentication.
        Used for webhook endpoints and automated integrations.
        
        **Example:**
        ```
        X-API-Key: sk_live_1234567890abcdef
        ```
    OAuth2Auth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://senwisetool.com/oauth/authorize
          tokenUrl: https://senwisetool.com/oauth/token
          scopes:
            read:users: Read user information
            write:users: Create and update users
            read:farms: Read farm data
            write:farms: Create and update farms
            read:companies: Read company information
            write:companies: Create and update companies
            admin: Full administrative access
      description: |
        OAuth 2.0 authorization code flow for third-party integrations.
        Recommended for public integrations and mobile applications.

  parameters:
    PaginationLimit:
      name: limit
      in: query
      description: Number of items to return (max 100)
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
        example: 20
    PaginationOffset:
      name: offset
      in: query
      description: Number of items to skip for pagination
      required: false
      schema:
        type: integer
        minimum: 0
        default: 0
        example: 0
    CompanyId:
      name: company_id
      in: query
      description: Filter by company ID
      required: false
      schema:
        type: string
        format: cuid
        example: "clh1234567890abcdef"
    DateRangeStart:
      name: start_date
      in: query
      description: Start date for filtering (ISO 8601 format)
      required: false
      schema:
        type: string
        format: date
        example: "2024-01-01"
    DateRangeEnd:
      name: end_date
      in: query
      description: End date for filtering (ISO 8601 format)
      required: false
      schema:
        type: string
        format: date
        example: "2024-12-31"

  responses:
    UnauthorizedError:
      description: Authentication credentials were missing or invalid
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Unauthorized"
              message:
                type: string
                example: "Invalid or missing authentication token"
              code:
                type: string
                example: "AUTH_REQUIRED"
    ForbiddenError:
      description: The request was understood but the server is refusing to authorize it
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Forbidden"
              message:
                type: string
                example: "Insufficient permissions to access this resource"
              code:
                type: string
                example: "INSUFFICIENT_PERMISSIONS"
    ValidationError:
      description: The request was well-formed but contains invalid parameters
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Validation Error"
              message:
                type: string
                example: "Request validation failed"
              details:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                      example: "email"
                    message:
                      type: string
                      example: "Invalid email format"
              code:
                type: string
                example: "VALIDATION_ERROR"
    RateLimitError:
      description: Too many requests, please try again later
      headers:
        X-RateLimit-Limit:
          description: The number of allowed requests in the current period
          schema:
            type: integer
        X-RateLimit-Remaining:
          description: The number of remaining requests in the current period
          schema:
            type: integer
        X-RateLimit-Reset:
          description: The number of seconds left in the current period
          schema:
            type: integer
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Rate Limit Exceeded"
              message:
                type: string
                example: "Too many requests, please try again later"
              retry_after:
                type: integer
                example: 3600
              code:
                type: string
                example: "RATE_LIMIT_EXCEEDED"
    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Internal Server Error"
              message:
                type: string
                example: "An unexpected error occurred"
              request_id:
                type: string
                example: "req_1234567890abcdef"
              code:
                type: string
                example: "INTERNAL_ERROR"

security:
  - BearerAuth: []
  - ApiKeyAuth: []
webhooks:
  userInfo:
    post:
      summary: New user webhook
      description: "Information about a new subscription entring in the system."
      operationId: susbscriptionInfo
      tags:
        - susbscription
      requestBody:
        content:
          application/json:
            schema:
              $ref: components/schemas/subscription.yaml
      responses:
        "200":
          description: "Successfully retrieved information about a new subscription."
      security:
        - BearerAuth: []
